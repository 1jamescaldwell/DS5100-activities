[
  {
    "objectID": "18Jun Excercises.html",
    "href": "18Jun Excercises.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "##Excercise 2.1\nstr0 = \"HelloWorld\"\nprint(str0[:3])\nprint(str0[-3:])\n\nHel\nrld\n\n\n\n##Excercise 2.2\nlst0 = []\nlst0.append(\"Hello\")\nlst0.append(\"World\")\nlst0.append(\"!\")\nprint(lst0[1])\n\nWorld"
  },
  {
    "objectID": "hw_keys/M09-HW-KEY.html",
    "href": "hw_keys/M09-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:  DS 5100\nModule:  09 Python Packages\nTopic:   HW Package Booklover\nAuthor:  R.C. Alvarado (adapted)\nDate:    7 July 2023 (revised)"
  },
  {
    "objectID": "hw_keys/M09-HW-KEY.html#task-1",
    "href": "hw_keys/M09-HW-KEY.html#task-1",
    "title": "Metadata",
    "section": "Task 1",
    "text": "Task 1\n(5 points)\nShow the directory structure of your repo by running this command from the root of your repo:\n\n!ls -lR DS5100-2022-08-O-HW09/solution1\n\ntotal 16\ndrwxr-xr-x@ 6 rca2t1  staff   192 Oct 31 08:35 Book_Lover.egg-info\ndrwxr-xr-x@ 4 rca2t1  staff   128 Oct 31 08:28 booklover\n-rw-r--r--@ 1 rca2t1  staff  2753 Oct 31 08:28 booklover_test.py\ndrwxr-xr-x@ 4 rca2t1  staff   128 Oct 31 08:34 build\n-rw-r--r--@ 1 rca2t1  staff   300 Oct 31 08:32 setup.py\n\nDS5100-2022-08-O-HW09/solution1/Book_Lover.egg-info:\ntotal 32\n-rw-r--r--@ 1 rca2t1  staff  217 Oct 31 08:35 PKG-INFO\n-rw-r--r--@ 1 rca2t1  staff  189 Oct 31 08:35 SOURCES.txt\n-rw-r--r--@ 1 rca2t1  staff    1 Oct 31 08:35 dependency_links.txt\n-rw-r--r--@ 1 rca2t1  staff   10 Oct 31 08:35 top_level.txt\n\nDS5100-2022-08-O-HW09/solution1/booklover:\ntotal 16\n-rw-r--r--@ 1 rca2t1  staff   81 Oct 31 08:35 __init__.py\n-rw-r--r--@ 1 rca2t1  staff  982 Oct 31 08:28 booklover.py\n\nDS5100-2022-08-O-HW09/solution1/build:\ntotal 0\ndrwxr-xr-x@ 2 rca2t1  staff  64 Oct 31 08:35 bdist.macosx-10.9-x86_64\ndrwxr-xr-x@ 3 rca2t1  staff  96 Oct 31 08:34 lib\n\nDS5100-2022-08-O-HW09/solution1/build/bdist.macosx-10.9-x86_64:\ntotal 0\n\nDS5100-2022-08-O-HW09/solution1/build/lib:\ntotal 0\ndrwxr-xr-x@ 4 rca2t1  staff  128 Oct 31 08:35 booklover\n\nDS5100-2022-08-O-HW09/solution1/build/lib/booklover:\ntotal 16\n-rw-r--r--@ 1 rca2t1  staff   81 Oct 31 08:35 __init__.py\n-rw-r--r--@ 1 rca2t1  staff  982 Oct 31 08:28 booklover.py"
  },
  {
    "objectID": "hw_keys/M09-HW-KEY.html#task-2",
    "href": "hw_keys/M09-HW-KEY.html#task-2",
    "title": "Metadata",
    "section": "Task 2",
    "text": "Task 2\n(1 point)\nPut the URL of your GitHub repo here. Just paste it into a Markdown cell.\nURL: https://github.com/ontoligent/DS5100-2022-08-O-HW09"
  },
  {
    "objectID": "hw_keys/M09-HW-KEY.html#task-3",
    "href": "hw_keys/M09-HW-KEY.html#task-3",
    "title": "Metadata",
    "section": "Task 3",
    "text": "Task 3\n(1 point)\nShow the results of installing your package.\n!pip install -e .\n(base) rca2t1: pip install .\nProcessing /Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2022-08-O/repo-keys/M09/HW/DS5100-2022-08-O-HW09/solution1\n  Preparing metadata (setup.py) ... done\nBuilding wheels for collected packages: Book-Lover\n  Building wheel for Book-Lover (setup.py) ... done\n  Created wheel for Book-Lover: filename=Book_Lover-0.1-py3-none-any.whl size=1847 sha256=9a744eb67e96a6ee90bdcef7a75aa5e1f4609e3dad4b882d74b8525b3618f1db\n  Stored in directory: /private/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/pip-ephem-wheel-cache-5j4h9ixw/wheels/a3/d9/80/9c584f4d021cd3a655bf9797c8a1b74590a314809251444c82\nSuccessfully built Book-Lover\nInstalling collected packages: Book-Lover\n  Attempting uninstall: Book-Lover\n    Found existing installation: Book-Lover 0.1\n    Uninstalling Book-Lover-0.1:\n      Successfully uninstalled Book-Lover-0.1\nSuccessfully installed Book-Lover-0.1"
  },
  {
    "objectID": "hw_keys/M09-HW-KEY.html#task-4",
    "href": "hw_keys/M09-HW-KEY.html#task-4",
    "title": "Metadata",
    "section": "Task 4",
    "text": "Task 4\n(1 point)\nCreate a file outside your repo to test your package by running it.\nTo do this, import the package into your file and create a BookLover object.\nThen add a book and then print number books read.\nThen run the file.\nShow the output of running the file below, using a command like the following:\n!python ../book_lover_demo.py\n(base) rca2t1: python book_lover_demo.py \nThis is from the key to HW09.\nNumber of books read: 1"
  },
  {
    "objectID": "hw_keys/M03-HW-KEY.html",
    "href": "hw_keys/M03-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:   DS 5100\nTerm:     Fall 2023\nModule:   M03 Homework KEY\nAuthor:   R.C. Alvarado\nDate:     19 August 2023 (revised)"
  },
  {
    "objectID": "hw_keys/M03-HW-KEY.html#an-alternate-solution",
    "href": "hw_keys/M03-HW-KEY.html#an-alternate-solution",
    "title": "Metadata",
    "section": "An alternate solution",
    "text": "An alternate solution\n\nX = range(1, 101)\nA = [(x % 3 == 0) * 'Wahoo' for x in X]\nB = [(x % 5 == 0) * 'wah!' for x in X]\nC = [a + b for a, b in zip(A, B) if a + b]\n\n\nC\n\n['Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoowah!',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoowah!',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoowah!',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoowah!',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoowah!',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoowah!',\n 'Wahoo',\n 'wah!',\n 'Wahoo',\n 'Wahoo',\n 'wah!']\n\n\n\nprint('\\n'.join(C))\nprint(len(C))\n\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\n47\n\n\n\n%%timeit\nX1 = range(1, 101)\nA1 = [x % 3 == 0 for x in X1]\nB1 = [x % 5 == 0 for x in X1]\nC1 = [a * 'Wahoo' + b * 'wah!' for a, b in zip(A1, B1) if a or b]\n\n14.9 µs ± 38.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\nprint('\\n'.join(C1))\nprint(len(C1))\n\nNameError: name 'C1' is not defined\n\n\n\n# kfunc = lambda x, f, s: (x % f == 0) * s\n\ndef kfunc(x, f, s):\n    return (x % f == 0) * s\n\nX2 = range(1, 101)\nA2 = [kfunc(x, 3, 'Wahoo') for x in X2]\nB2 = [kfunc(x, 5, 'wah!') for x in X2]\nC2 = [a + b for a, b in zip(A2, B2) if a + b]\n\n\nprint('\\n'.join(C2))\nprint(len(C2))"
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html",
    "href": "hw_keys/M08-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:  DS 5100\nModule:  08 Python Testing\nTopic:   HW 08 Unit Testing a Book Lover Class\nAuthor:  R.C. Alvarado (adapted)\nDate:    7 July 2023"
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html#task-1",
    "href": "hw_keys/M08-HW-KEY.html#task-1",
    "title": "Metadata",
    "section": "Task 1",
    "text": "Task 1\n(5 points; .5 pt per attribute and method)\nDefine a BookLover class in a file named booklover.py.\n\nAttributes\n\n\n\n\n\n\n\nAttribute\nValue\n\n\n\n\nname\nThe name of the person (type:string)\n\n\nemail\nThe person’s email, serving as a unique identifier (type:string)\n\n\nfav_genre\nThe person’s favorite book genre (e.g., mystery, fantasy, or historical fiction).  (type:string)\n\n\nnum_books\nKeeps track of the number of books the person has read (type:int)\n\n\nbook_list\na dataframe with the columns ['book_name', 'book_rating']\n\n\n\nThe columns in book_list have the following meanings: - book_name is the title of the book the person has read. - book_rating is the person’s rating of that book on a scale of 1 to 5, where 1 means the person did not like the book at all, and 5 means the person loved the book.\nSome example book entries are:\n(\"Jane Eyre\", 4)\n(\"Fight Club\", 3)\n(\"The Divine Comedy\", 5)\n(\"The Popol Vuh\", 5)\n\n\nMethods\nInitializer:\n__init__(): - name, email, and fav_genre (in this order) are required. - num_books and book_list are optional. - Use these default parameters: \n  num_books = 0\n  book_list = pd.DataFrame({'book_name':[], 'book_rating':[]})\nDo not add any additional fields of your own.\nMethod 1:\nadd_book(book_name, rating): - This function takes a book name (string) and rating (integer from 0 to 5) - It tries to add the book to book_list. See hint below on how to pass a new book to the dataframe. - Only add a book to the person’s book_list if that book doesn’t already exist. - It is sufficient to match on book_name. - If it does exist, tell the user.\nHint: To add a new book to the book list (which is a dataframe), do this in your method, where book_name and book_rating are the arguments passed to the method.:\nnew_book = pd.DataFrame({\n    'book_name': [book_name], \n    'book_rating': [book_rating]\n})\n\nself.book_list = pd.concat([self.book_list, new_book], ignore_index=True)\nOf course, be sure to see if book_name is not in the book list.\nMethod 2:\nhas_read(book_name) - This function takes book_name (string) as input and determines if the person has read the book. - That is, if that book name is in book_list. - Again, it is sufficient to match on book_name. - The method should return True if the person has read the book, False otherwise.\nMethod 3:\nnum_books_read() - This function takes no parameters and just returns the total number of books the person has read.\nMethod 4:\nfav_books(): - This function takes no parameters and returns the filtered dataframe of the person’s most favorite books. - Books in this list should have a rating &gt; 3.\nOnce you have created your class\nBe sure to instantiate your class to see if everything is working. You can do this by prototyping your class in a notebook, where you can run code that uses it there, and then save the class to the .py file when you are done.\nOr you can create a another file, say demo.py that imports and uses the class.\nA final option – which the test file will use – is to put this code at the bottom of your .py file, after and outside of your class definition:\n\nif __name__ == '__main__':\n    \n    test_object = BookLover(\"Han Solo\", \"hsolo@millenniumfalcon.com\", \"scifi\")\n    test_object.add_book(\"War of the Worlds\", 4)\n    # And so forth\nNOTE: The methods listed above do not have self as their first argument, but they should in your class."
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html#solution",
    "href": "hw_keys/M08-HW-KEY.html#solution",
    "title": "Metadata",
    "section": "Solution",
    "text": "Solution\nHere is the code that should appear in a Python file.\nUnlike the test code, it is also executable here in the notebook.\n\nimport pandas as pd\n\nclass BookLover():\n        \n    def __init__(self, name, email, fav_genre):\n        self.name = name\n        self.email = email\n        self.fav_genre = fav_genre\n        self.num_books = 0\n        self.book_list = pd.DataFrame({'book_name':[], 'book_rating':[]})\n\n    def add_book(self, book_name, book_rating):\n        new_book = pd.DataFrame({\n            'book_name': [book_name], \n            'book_rating': [book_rating]\n        })\n        if self.has_read(book_name):\n            return False\n        else:\n            self.book_list = pd.concat([self.book_list, new_book], ignore_index=True)            \n            \n    def has_read(self, book_name):\n        return any(self.book_list.book_name == book_name)\n    \n    def num_books_read(self):\n        return(len(self.book_list))\n    \n    def fav_books(self):\n        return self.book_list[self.book_list.book_rating &gt; 3]        \n\n\nlover = BookLover(\"Fred\", \"a@b.com\", \"scifi\")\n\n\nlover.book_list\n\n\n\n\n\n\n\n\n\nbook_name\nbook_rating\n\n\n\n\n\n\n\n\n\n\n\nbooks = [\n    (\"Jane Eyre\", 4), \n    (\"Fight Club\", 3),\n    (\"The Divine Comedy\", 5),\n    (\"The Popol Vuh\", 5) \n]\n\n\nfor book in books: lover.add_book(*book)\n\n\nlover.add_book(*books[2])\n\nFalse\n\n\n\nlover.has_read(books[0][0])\n\nTrue\n\n\n\nlover.num_books_read()\n\n4\n\n\n\nlover.book_list\n\n\n\n\n\n\n\n\n\nbook_name\nbook_rating\n\n\n\n\n0\nJane Eyre\n4.0\n\n\n1\nFight Club\n3.0\n\n\n2\nThe Divine Comedy\n5.0\n\n\n3\nThe Popol Vuh\n5.0\n\n\n\n\n\n\n\n\n\nlover.fav_books()\n\n\n\n\n\n\n\n\n\nbook_name\nbook_rating\n\n\n\n\n0\nJane Eyre\n4.0\n\n\n2\nThe Divine Comedy\n5.0\n\n\n3\nThe Popol Vuh\n5.0"
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html#task-2",
    "href": "hw_keys/M08-HW-KEY.html#task-2",
    "title": "Metadata",
    "section": "Task 2",
    "text": "Task 2\n(6 points; 1 pt per method)\nCreate a test suite for the previous class in a file named booklover_test.py.\nIn the file, write a class called BookLoverTestSuite, being sure to import the unittest library and the BookLover class from the first file.\n\nUnit Tests\nIn this class, include the unit tests below:\n\ntest_1_add_book(): Add a book and test if it is in book_list.\ntest_2_add_book(): Add the same book twice. Test if it’s in book_list only once.\ntest_3_has_read(): Pass a book in the list and test the answer is True.\ntest_4_has_read(): Pass a book NOT in the list and use assert False to test if the answer is True\ntest_5_num_books_read(): Add some books to the list, and test num_books matches expected.\ntest_6_fav_books(): Add some books with ratings to the list, making sure some of them have rating &gt; 3. \n\nYour test should check that the returned books have rating &gt; 3.\n\n\nNote that you do not need to create an __init__() method in this class, nor do you have to define any class variables.\nInstead, treat every method as a small, stand-alone program in which you create a new object for your test. This is not the best practice in a production environment, but it works and it will enable you to get the gist of unit testing.\n\n\nTemplate\nHere is a template of the file you will create:\nimport unittest\nfrom booklover import BookLover\n\nclass BookLoverTestSuite(unittest.TestCase):\n    \n    def test_1_add_book(self): \n        # add a book and test if it is in `book_list`.\n\n    def test_2_add_book(self):\n        # add the same book twice. Test if it's in `book_list` only once.\n                \n    def test_3_has_read(self): \n        # pass a book in the list and test if the answer is `True`.\n        \n    def test_4_has_read(self): \n        # pass a book NOT in the list and use `assert False` to test the answer is `True`\n        \n    def test_5_num_books_read(self): \n        # add some books to the list, and test num_books matches expected.\n\n    def test_6_fav_books(self):\n        # add some books with ratings to the list, making sure some of them have rating &gt; 3. \n        # Your test should check that the returned books have rating  &gt; 3\n                \nif __name__ == '__main__':\n    \n    unittest.main(verbosity=3)\nThe last part of the file is crucial: It tells the Python interpreter to run the bit of code at the end if the file is being run directly (and not being imported into another file)."
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html#solution-1",
    "href": "hw_keys/M08-HW-KEY.html#solution-1",
    "title": "Metadata",
    "section": "Solution",
    "text": "Solution\nHere is the code that should appear in a Python file:\n\nimport unittest\nfrom booklover import BookLover\n\nclass BookLoverTestSuite(unittest.TestCase):\n    \n    def test_1_add_book(self): \n        # add a book and test if it is in `book_list`.\n\n        book_lover = BookLover(\"RCA\", \"a@b.com\", \"scifi\")\n        test_name = \"Test Book\"\n        test_rating = 5\n        book_lover.add_book(test_name, test_rating)\n        self.assertTrue(book_lover.has_read(test_name))\n\n    def test_2_add_book(self):\n        # add the same book twice. Test it's in `book_list` only once.\n        \n        book_lover = BookLover(\"RCA\", \"a@b.com\",  \"scifi\")\n        test_name = \"Test Book\"\n        test_rating = 5\n        book_lover.add_book(test_name, test_rating)\n        book_lover.add_book(test_name, test_rating)\n        expected = 1\n        actual = len(book_lover.book_list[book_lover.book_list.book_name == test_name])\n        self.assertEqual(expected, actual)\n        \n    def test_3_has_read(self): \n        # pass a book in the list and test the answer is `True`.\n        \n        book_lover = BookLover(\"RCA\", \"a@b.com\",  \"scifi\")\n        test_name = \"Test Book\"\n        test_rating = 5\n        book_lover.add_book(test_name, test_rating)\n        self.assertTrue(book_lover.has_read(test_name))\n\n    def test_4_has_read(self): \n        # pass a book NOT in the list and use `assert False` to test if the answer is `True`\n        \n        book_lover = BookLover(\"RCA\", \"a@b.com\",  \"scifi\")\n        test_name = \"Test Book\"\n        self.assertFalse(book_lover.has_read(test_name))\n\n    def test_5_num_books_read(self): \n        # add some books to the list, and test num_books matches expected.\n        \n        book_lover = BookLover(\"RCA\", \"a@b.com\",  \"scifi\")\n        test_books = [\n            (\"Jane Eyre\", 4), \n            (\"Fight Club\", 3),\n            (\"The Divine Comedy\", 5),\n            (\"The Popol Vuh\", 5) \n        ]\n        for book in test_books:\n            book_lover.add_book(*book)\n        \n        self.assertEqual(len(test_books), book_lover.num_books_read())\n\n    def test_6_fav_books(self):\n        # add some books with ratings to the list, making sure some of them have rating $&gt; 3$. \n        # Your test should check that the returned books have rating $ &gt; 3\n        \n        book_lover = BookLover(\"RCA\", \"a@b.com\",  \"scifi\")\n        test_books = [\n            (\"Jane Eyre\", 4), \n            (\"Fight Club\", 3),\n            (\"The Divine Comedy\", 5),\n            (\"The Popol Vuh\", 5) \n        ]\n        for book in test_books:\n            book_lover.add_book(*book)\n\n        actual = len(book_lover.fav_books())\n        expected = len([x for x, y in test_books if y &gt; 3])\n        self.assertEqual(actual, expected)\n        \n        \nif __name__ == '__main__':\n    \n    unittest.main(verbosity=3)\n\n!python booklover_test.py\n\ntest_1_add_book (__main__.BookLoverTestSuite) ... ok\ntest_2_add_book (__main__.BookLoverTestSuite) ... ok\ntest_3_has_read (__main__.BookLoverTestSuite) ... ok\ntest_4_has_read (__main__.BookLoverTestSuite) ... ok\ntest_5_num_books_read (__main__.BookLoverTestSuite) ... ok\ntest_6_fav_books (__main__.BookLoverTestSuite) ... ok\n\n----------------------------------------------------------------------\nRan 6 tests in 0.013s\n\nOK"
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html#task-3",
    "href": "hw_keys/M08-HW-KEY.html#task-3",
    "title": "Metadata",
    "section": "Task 3",
    "text": "Task 3\n(6 points; 1 pt per test)\nRun the tests and save results in a file named booklover_results.txt. All six tests must return positive.\nTest your class at the command line as follows:\nrivanna$ python booklover_test.py\nLook at the output and make sure your tests are working and your code passes the test. When you are ready, output the test results to the third file as follows:\nrivanna$ python booklover_test.py 2&gt; booklover_results.txt"
  },
  {
    "objectID": "hw_keys/M08-HW-KEY.html#task-4",
    "href": "hw_keys/M08-HW-KEY.html#task-4",
    "title": "Metadata",
    "section": "Task 4",
    "text": "Task 4\n(3 points; 1 point per file)\nAll three files created and named properly."
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html",
    "href": "hw_keys/M02-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:   DS 5100\nTerm:     Fall 2023\nModule:   M02 Homework\nAuthor:   R.C. Alvarado\nDate:     19 August 2023 (revised)"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-1",
    "href": "hw_keys/M02-HW-KEY.html#task-1",
    "title": "Metadata",
    "section": "Task 1",
    "text": "Task 1\nUsing the data in Table 1, create a dictionary called gradebook where the keys contain the names and the values are the associated grades. Print the dictionary. (1 PT)\n\n# Put code here\n\n\ngradebook = {\n    'Jon': 95,\n    'Mike': 84,\n    'Jaime': 99\n}\n\n\nprint(gradebook)\n\n{'Jon': 95, 'Mike': 84, 'Jaime': 99}"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-2",
    "href": "hw_keys/M02-HW-KEY.html#task-2",
    "title": "Metadata",
    "section": "Task 2",
    "text": "Task 2\nIndex into the gradebook to print Mike’s grade. Do NOT use the get() method for this. (1 PT)\n\n# Put code here\n\n\nprint(gradebook['Mike'])\n\n84"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-3",
    "href": "hw_keys/M02-HW-KEY.html#task-3",
    "title": "Metadata",
    "section": "Task 3",
    "text": "Task 3\nAttempt to index into gradebook to print Jeff’s grade. Show the result. Do NOT use the get() method for this. (1 PT)\n\n# Put code here\n\n\nprint(gradebook['Jeff'])\n\nKeyError: 'Jeff'"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-4",
    "href": "hw_keys/M02-HW-KEY.html#task-4",
    "title": "Metadata",
    "section": "Task 4",
    "text": "Task 4\nUsing Table 2, build a list from the names called names and print it. (1 PT)\n\n# Put code here\n\n\nnames = ['Alex', 'Patrick', 'Tom', 'Joe', 'Alex']\n\n\nprint(names)\n\n['Alex', 'Patrick', 'Tom', 'Joe', 'Alex']"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-5",
    "href": "hw_keys/M02-HW-KEY.html#task-5",
    "title": "Metadata",
    "section": "Task 5",
    "text": "Task 5\nSort the list in ascending order and print it. (1 PT)\n\n# Put code here\n\n\nprint(sorted(names))\n\n['Alex', 'Alex', 'Joe', 'Patrick', 'Tom']"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-6",
    "href": "hw_keys/M02-HW-KEY.html#task-6",
    "title": "Metadata",
    "section": "Task 6",
    "text": "Task 6\nBuild a set from the names in Table 2 and print it. (1 PT)\n\n# Put code here\n\n\nprint(set(names))\n\n{'Alex', 'Patrick', 'Tom', 'Joe'}"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-7",
    "href": "hw_keys/M02-HW-KEY.html#task-7",
    "title": "Metadata",
    "section": "Task 7",
    "text": "Task 7\nBuild a dictionary from the touchdowns data, calling it td, and print it. Use lists to store the values. Remember that dictionary keys must be unique. (1 PT)\n\n# Put code here\n\n\ntd = {\n    'Alex': [2, 1],\n    'Patrick': [4],\n    'Tom': [1],\n    'Joe': [3]\n}\n\n\ntd\n\n{'Alex': [2, 1], 'Patrick': [4], 'Tom': [1], 'Joe': [3]}\n\n\nAutomatic population:\n\ntd_data = \"\"\"\nAlex    2\nPatrick 4\nTom     1\nJoe     3\nAlex    1\n\"\"\".split(\"\\n\")[1:-1]\ntd_data\n\n['Alex    2', 'Patrick 4', 'Tom     1', 'Joe     3', 'Alex    1']\n\n\n\ntd_dict = {}\nfor row in td_data:\n    name, n = row.split()\n    if name not in td_dict.keys():\n        td_dict[name] = []\n    td_dict[name].append(int(n))\ntd_dict\n\n{'Alex': [2, 1], 'Patrick': [4], 'Tom': [1], 'Joe': [3]}"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-8",
    "href": "hw_keys/M02-HW-KEY.html#task-8",
    "title": "Metadata",
    "section": "Task 8",
    "text": "Task 8\nCompute the sum of Alex’s touchdowns using the appropriate built-in function.\n\n# Put code here\n\n\nsum(td['Alex'])\n\n3"
  },
  {
    "objectID": "hw_keys/M02-HW-KEY.html#task-9",
    "href": "hw_keys/M02-HW-KEY.html#task-9",
    "title": "Metadata",
    "section": "Task 9",
    "text": "Task 9\nGet the keys from td and save them as a sorted list list1. Then get a set from names and save them as a sorted list called list2. Compare them with a boolean operator to see if they are equal. (2 PTS)\n\n# Put code here\n\n\nlist1 = sorted(list(td.keys()))\nlist2 = sorted(list(set(names)))\n\n\n# set(names), list(set(names)), sorted(list(set(names)))\n\n\nlist1 == list2\n\nTrue\n\n\n\nlist1\n\n['Alex', 'Joe', 'Patrick', 'Tom']\n\n\n\nlist2 = set(names)\n\n\nlist2\n\n{'Alex', 'Joe', 'Patrick', 'Tom'}\n\n\n\ntype(list2)\n\nset\n\n\n\nlist1 == list2\n\nFalse\n\n\n\nlist1 == sorted(list2)\n\nTrue\n\n\n\ntype(sorted(list2))\n\nlist"
  },
  {
    "objectID": "6_20_exercises.html",
    "href": "6_20_exercises.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "# 3.1\n\n\nval = -2\n\nif -10 &lt; val &lt; -5:\n    print('bucket 1')\nelif -5 &lt;= val &lt; -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n    \n# bucket 3 if val = -2, nothing returns if val = 5\n\n# To fix problem, add an else statement (ex: else: \n                                                # print('bucket 4'))\n\nbucket 3\n\n\n\n# 3.2\n\n\nxx = [-2, 8, 0, 5, 6]\nmax_val = max(xx)\nfor x in xx:\n    if x &lt; (max_val):\n        print(x)\n    else: \n        print(\"max val\")\n\n-2\nmax val\n0\n5\n6\n\n\n\n# 3.3 - saving issues with this one (completed the rest of questions in PyCharm, copy and pasting below)\n\n\n# 3.4 \n\n\n# 3.4\n\nmy_list = ['Virginia', 'Kentucky', 'Wyoming', 'Montana']\nfor i in my_list:\n  print(i.lower())\n\nvirginia\nkentucky\nwyoming\nmontana\n\n\n\n# 3.5\n\n\nmy_list = ['Virginia', 'Kentucky', 'Wyoming', 'Montana']\nmy_it = iter(my_list)\nprint(next(my_it))\nprint(next(my_it))\nprint(next(my_it))\nprint(next(my_it))\n\nVirginia\nKentucky\nWyoming\nMontana\n\n\n\n# 3.6\n\n\n# city_dict: {\n#  'Charlottesville': 22903,\n#  'Ivy': 22902\n#}\n\n#for k, v in city_dict.items():\n#  print(k, v)\n\n\n# 3.7\n\n\n#for k, v in city_dict.keys():\n#  print(k, v[k])\n\n\n# 3.8\n\n\ncube_list = [1, 2, 3, 4]\nfor i in cube_list:\n  print(i**3)\n\n1\n8\n27\n64\n\n\n\n# 3.9\n\n\nmixed_list = ['1', 'two', '3', 'four', 'five', '6', '7']\nfor i in mixed_list:\n  is_num = True\n\n  for char in i:\n    if char not in mixed_list:\n      is_num = False\n      break\n\n    if is_num:\n      mixed_list.append(i)\n\nprint(mixed_list)"
  },
  {
    "objectID": "exercises/M02-Exercises.html",
    "href": "exercises/M02-Exercises.html",
    "title": "M02 In-Class Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential"
  },
  {
    "objectID": "exercises/M02-Exercises.html#solution-1",
    "href": "exercises/M02-Exercises.html#solution-1",
    "title": "M02 In-Class Exercises",
    "section": "Solution 1",
    "text": "Solution 1\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\nTwinkle, twinkle, little star, \n    How I wonder what you are! \n        Up above the world so high, \n        Like a diamond in the sky. \nTwinkle, twinkle, little star, \n    How I wonder what you are!"
  },
  {
    "objectID": "exercises/M02-Exercises.html#solution-2",
    "href": "exercises/M02-Exercises.html#solution-2",
    "title": "M02 In-Class Exercises",
    "section": "Solution 2",
    "text": "Solution 2\n\nmsg = \"\"\"\nTwinkle, twinkle, little star, \n\\tHow I wonder what you are! \n\\t\\tUp above the world so high, \n\\t\\tLike a diamond in the sky. \nTwinkle, twinkle, little star, \n\\tHow I wonder what you are!\n\"\"\"\n\n\nprint(msg)\n\n\nTwinkle, twinkle, little star, \n    How I wonder what you are! \n        Up above the world so high, \n        Like a diamond in the sky. \nTwinkle, twinkle, little star, \n    How I wonder what you are!"
  },
  {
    "objectID": "exercises/M06-Notes.html",
    "href": "exercises/M06-Notes.html",
    "title": "M06 Notes",
    "section": "",
    "text": "There is a new edition of the book we are using for NumPy and Pandas:\n\nPython for Data Analysis, 3E\n\nShout to Daniel Stornetta!"
  },
  {
    "objectID": "exercises/M06-Notes.html#new-edition-of-pandas-book",
    "href": "exercises/M06-Notes.html#new-edition-of-pandas-book",
    "title": "M06 Notes",
    "section": "",
    "text": "There is a new edition of the book we are using for NumPy and Pandas:\n\nPython for Data Analysis, 3E\n\nShout to Daniel Stornetta!"
  },
  {
    "objectID": "exercises/M06-Notes.html#numpy-slices",
    "href": "exercises/M06-Notes.html#numpy-slices",
    "title": "M06 Notes",
    "section": "NumPy Slices",
    "text": "NumPy Slices\n\n\n\nimage.png\n\n\n\nimport numpy as np\n\n\ndef inspect(a):\n    print('Structure:')\n    print(a)\n    print('Shape:', a.shape, 'Axes:', len(a.shape))\n\n\na1 = np.random.randn(3,3)\n\n\ninspect(a1)\n\nStructure:\n[[ 0.94189714  0.25292708 -0.53694544]\n [-0.38919961 -1.06228332 -0.57043245]\n [-0.07302494 -2.18720499 -1.47706283]]\nShape: (3, 3) Axes: 2\n\n\n\ninspect(a1[2])\n\nStructure:\n[-0.60758386 -2.84371596  1.15749854]\nShape: (3,) Axes: 1\n\n\n\ninspect(a1[[2]])\n\nStructure:\n[[-0.60758386 -2.84371596  1.15749854]]\nShape: (1, 3) Axes: 2\n\n\n\ninspect(a1[2, :])\n\nStructure:\n[-0.60758386 -2.84371596  1.15749854]\nShape: (3,) Axes: 1\n\n\n\ninspect(a1[2:])\n\nStructure:\n[[-0.60758386 -2.84371596  1.15749854]]\nShape: (1, 3) Axes: 2\n\n\n\ninspect(a1[[2], :])\n\nStructure:\n[[-0.60758386 -2.84371596  1.15749854]]\nShape: (1, 3) Axes: 2\n\n\n\ninspect(a1[2:, :])\n\nStructure:\n[[-0.60758386 -2.84371596  1.15749854]]\nShape: (1, 3) Axes: 2\n\n\n\ninspect(a1[2, 2])\n\nStructure:\n1.1574985440672065\nShape: () Axes: 0\n\n\n\ninspect(a1[2, [2]])\n\nStructure:\n[1.15749854]\nShape: (1,) Axes: 1\n\n\n\ninspect(a1[[2], 2])\n\nStructure:\n[1.15749854]\nShape: (1,) Axes: 1\n\n\n\ninspect(a1[[2], [2]])\n\nStructure:\n[1.15749854]\nShape: (1,) Axes: 1\n\n\n\ninspect(a1[2:, 2:])\n\nStructure:\n[[1.15749854]]\nShape: (1, 1) Axes: 2\n\n\n\ninspect(a1[:, 2])\n\nStructure:\n[-2.23444565  0.09570946  1.15749854]\nShape: (3,) Axes: 1\n\n\n\ninspect(a1[:, [2]])\n\nStructure:\n[[-2.23444565]\n [ 0.09570946]\n [ 1.15749854]]\nShape: (3, 1) Axes: 2\n\n\n\ninspect(a1[:, 1:])\n\nStructure:\n[[ 0.68627847 -2.23444565]\n [ 0.61797039  0.09570946]\n [-2.84371596  1.15749854]]\nShape: (3, 2) Axes: 2"
  },
  {
    "objectID": "exercises/M06-Notes.html#pandas",
    "href": "exercises/M06-Notes.html#pandas",
    "title": "M06 Notes",
    "section": "Pandas",
    "text": "Pandas\n\nPandas assumes a 2D world.\nUse Xarray for more dimensions …\nPandas is lingua franca"
  },
  {
    "objectID": "exercises/M06-Notes.html#pandas-indexing",
    "href": "exercises/M06-Notes.html#pandas-indexing",
    "title": "M06 Notes",
    "section": "Pandas Indexing",
    "text": "Pandas Indexing\n\nimport pandas as pd\n\n\n-1\n\nser = pd.Series(np.arange(3.))\n\n\nser\n\n0    0.0\n1    1.0\n2    2.0\ndtype: float64\n\n\n\n# ser[-1] # Throws an error\n\n\nser2 = pd.Series(np.arange(3.), index=['a', 'b', 'c'])\n\n\nser2\n\na    0.0\nb    1.0\nc    2.0\ndtype: float64\n\n\n\nser2[-1]\n\n2.0\n\n\nWhy?\nIn the first case, -1 is interpreted as an index name.\n\n\nArithmetic\nSeries operations work with indexes implicitly.\n\ns1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])\ns2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'])\n\n\ns1\n\na    7.3\nc   -2.5\nd    3.4\ne    1.5\ndtype: float64\n\n\n\ns2\n\na   -2.1\nc    3.6\ne   -1.5\nf    4.0\ng    3.1\ndtype: float64\n\n\n\ns1 + s2\n\na    5.2\nc    1.1\nd    NaN\ne    0.0\nf    NaN\ng    NaN\ndtype: float64\n\n\nDataframes\n\ndf1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'), index=['Ohio', 'Texas', 'Colorado'])\ndf2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])\n\n\ndf1\n\n\n\n\n\n\n\n\n\nb\nc\nd\n\n\n\n\nOhio\n0.0\n1.0\n2.0\n\n\nTexas\n3.0\n4.0\n5.0\n\n\nColorado\n6.0\n7.0\n8.0\n\n\n\n\n\n\n\n\n\ndf2\n\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.0\n1.0\n2.0\n\n\nOhio\n3.0\n4.0\n5.0\n\n\nTexas\n6.0\n7.0\n8.0\n\n\nOregon\n9.0\n10.0\n11.0\n\n\n\n\n\n\n\n\n\ndf1 + df2\n\n\n\n\n\n\n\n\n\nb\nc\nd\ne\n\n\n\n\nColorado\nNaN\nNaN\nNaN\nNaN\n\n\nOhio\n3.0\nNaN\n6.0\nNaN\n\n\nOregon\nNaN\nNaN\nNaN\nNaN\n\n\nTexas\n9.0\nNaN\n12.0\nNaN\n\n\nUtah\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n(df1 + df2).fillna(0).style.background_gradient(axis=None, cmap='YlGnBu')\n\n\n\n\n\n\n\n \nb\nc\nd\ne\n\n\n\n\nColorado\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nOhio\n3.000000\n0.000000\n6.000000\n0.000000\n\n\nOregon\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nTexas\n9.000000\n0.000000\n12.000000\n0.000000\n\n\nUtah\n0.000000\n0.000000\n0.000000\n0.000000"
  },
  {
    "objectID": "exercises/M06-Notes.html#anatomy-of-a-data-frame",
    "href": "exercises/M06-Notes.html#anatomy-of-a-data-frame",
    "title": "M06 Notes",
    "section": "Anatomy of a Data Frame",
    "text": "Anatomy of a Data Frame\n\n\n\nimport seaborn as sns\n\n\n# sns.get_dataset_names()\n\n\ndata_set = 'iris'\n# data_set = 'penguins'\ndf = sns.load_dataset(data_set)\ndf.index.name = 'obs_id'\n\n\n# df = pd.read_csv(\"iris_data.csv\").set_index('obs_id')\n\n\ndf.groupby('species').agg(['mean', 'median', 'count'])\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\n\nmean\nmedian\ncount\nmean\nmedian\ncount\nmean\nmedian\ncount\nmean\nmedian\ncount\n\n\nspecies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsetosa\n5.006\n5.0\n50\n3.428\n3.4\n50\n1.462\n1.50\n50\n0.246\n0.2\n50\n\n\nversicolor\n5.936\n5.9\n50\n2.770\n2.8\n50\n4.260\n4.35\n50\n1.326\n1.3\n50\n\n\nvirginica\n6.588\n6.5\n50\n2.974\n3.0\n50\n5.552\n5.55\n50\n2.026\n2.0\n50\n\n\n\n\n\n\n\n\n\ndf['species'].value_counts().to_frame('n')\n\n\n\n\n\n\n\n\n\nn\n\n\nspecies\n\n\n\n\n\nsetosa\n50\n\n\nversicolor\n50\n\n\nvirginica\n50\n\n\n\n\n\n\n\n\n\n# df.values"
  },
  {
    "objectID": "exercises/M04-Exercises.html",
    "href": "exercises/M04-Exercises.html",
    "title": "M04 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential\n\nFunctions\n\n\nExercise 4.1\nWrite a function with these requirements: - has a sensible name - contains a docstring - takes two inputs: a string and an integer - returns True if the string length is equal to the integer, else False\nCall the function, passing inputs:\n- \"is this text the right length?\" for the string - 30 for the integer\nVerify the output is True. Try other combinations.\n\ndef verify_string_length(text, val):\n    \"\"\"\n    PURPOSE: check if the length of text is equal to a value\n    \n    INPUTS:\n    text   str\n    val    integer\n    \n    OUTPUTS:\n    check  bool\n    \"\"\"\n    \n#     check = len(text) == val\n#     return check\n    return len(text) == val # Could just do this\n\n\ntxt = \"is this text the right length?\"\nval = 30\nout = verify_string_length(txt, val)\nout\n\nTrue\n\n\n\nverify_string_length(\"The foul occurred after the buzzer.\", 10)\n\nFalse\n\n\n\n\nExercise 4.2\nWrite a function with these requirements: - takes *args for the input argument - squares each argument, printing the value. You can use a for loop. - returns None\nCall the function, passing at least two integers.\n\ndef square_args(*vars):\n    for var in vars:\n        print(var**2)\n    return None\n\n\nsquare_args(2,3,8)\n\n4\n9\n64\n\n\n\nlist_o_nums = [10, 100, 5, 62, 42]\nsquare_args(*list_o_nums)\n\n100\n10000\n25\n3844\n1764\n\n\n\nsquare_args(10, 100, 5, 62, 42)\n\n100\n10000\n25\n3844\n1764\n\n\n\n\nExercise 4.3\nWrite a function called word_shortener() that takes a long word and replaces it with a string that has the same first and last letters capitalized, and replaces the middle letters with the number of middle letters.\nFor example, “internationalization” would be returned as “I18N”.\nMake sure it only accepts strings, and of a minimum length.\nInclude a short docstring.\nHint: You can use isinstance() to check the variable type.\n\ndef word_shortener(long_word, min_len=5):\n    \"Converts a long word into word with internal letters replace by their count.\"\n    \n    # Validate the input\n    if not isinstance(long_word, str):\n        print(f\"{long_word} is a {type(long_word)}, not a string!\")\n        return False\n    elif len(long_word) &lt; min_len:\n        print(f\"{long_word} is too short. Put in a word at least {min_len} letters long.\")\n        return False\n    else:\n        # Do the work ...\n        first_letter = long_word[0].upper()\n        last_letter = long_word[-1].upper()\n        middle_number = len(long_word[1:-1])\n        new_word = first_letter + str(middle_number) + last_letter\n        return new_word\n    \n\n\nword_shortener('localization')\n\n'L10N'\n\n\n\nget_shorty = lambda x: f\"{x[0]}{len(x[1:-1])}{x[-1]}\".upper()\n\n\nget_shorty(\"operationalization\")\n\n'O16N'\n\n\n\nx = \"foo\"\ntype(x)\n\n\ntype(x) == str\n\nTrue\n\n\n\n\nExercise 4.4\nDefine a function with these requirements: - take one numeric value as input - subtract 5 from the value - return 1 if the difference is nonnegative, else return 0\nCall the function on different values to test it.\n\ndef step(x):\n    diff = x - 5\n    if diff &gt;= 0:\n        return 1\n    return 0\n\n\ndef step2(x):\n    return 1 if x - 5 &gt;= 0 else 0\n\n\ndef step3(x):\n    return int(x - 5 &gt;= 0)\n\n\nstep3(6.5)\n\n1\n\n\n\nstep(4)\n\n0\n\n\n\n\nScope\n\n\nExercise 4.5\nDefine a function that defines and prints a variable.\nShow that calling this variable outside the function produces an error.\n\ndef myfunct():\n    secret_x = 5\n    print(secret_x)\n\n\nmyfunct()\n\n5\n\n\n\nprint(secret_x)\n\nNameError: name 'secret_x' is not defined\n\n\n\n\nExercise 4.6\nRead the following code blocks (to be displayed).\nFor each block predict what the output will be.\ndef print_me():\n    print(x1)\n\nprint_me()\n\ndef print_me():\n    print(x1)\n\nprint_me()\n\nNameError: name 'x1' is not defined\n\n\ndef print_me2():\n    x2 = 5\n    print(x2)\n    \nprint_me2()\n\ndef print_me2():\n    x2 = 5\n    print(x2)\n    \nprint_me2()\n\n5\n\n\nx2 = 7\nprint_me2()\n\nx2 = 7\nprint_me2()\n\n5\n\n\nx2 = 7\nprint_me2()\nprint(x2)\n\nx2 = 7\nprint_me2()\nprint(x2)\n\n5\n7\n\n\ndef print_me3(x3):\n    print(x3)\n    \nx3 = 9\nprint_me3()\nprint_me3(x3)\nprint_me3()\nprint(x3)\n\ndef print_me3(x3):\n    print(x3)\n    \nx3 = 9\nprint_me3()\nprint_me3(x3)\nprint_me3()\nprint(x)\n\nTypeError: print_me3() missing 1 required positional argument: 'x3'\n\n\ndef print_me4(x4=5):\n    print(x4)\n    \nx4 = 9\nprint_me4()\nprint_me4(x4)\nprint_me4()\nprint(x4)\n\ndef print_me4(x4=5):\n    print(x4)\n    \nx4 = 9\nprint_me4()\nprint_me4(x4)\nprint_me4()\nprint(x4)\n\n5\n9\n5\n9\n\n\n\n\nLambda Functions\n\n\nExercise 4.6\nWrite a function that uses a lambda function to check if a value is in a range: \\(x &gt;= 10\\) and \\(x &lt;= 20\\)\nCall the function with different values to verify it works.\n\nin_range = lambda x: x &gt;= 10 and x &lt;= 25\n\n\nin_range(15)\n\nTrue\n\n\n\nin_range(0)\n\nFalse\n\n\n\n\nExercise 4.7\nModify the lambda function called in_range to take three inputs x, a, b which are the value, lower bound, and upper bound, respectively.\nCall the function with different x, a, b to verify it works.\n\nin_range_general = lambda x, a, b: x &gt;= a and x &lt;= b\n\n\nin_range_general(0, 1, 10)\n\nFalse\n\n\n\nin_range_general(0, -1, 100)\n\nTrue\n\n\n\n\nExercise 4.8\nFollowing the earlier example, write a lambda function called str_test that checks if a given string is found in another string, returning True if found, otherwise False.\nIn other words, check if a string is a substring of another.\nCall the function with different inputs to verify it works.\n\nstr_test = lambda s1, s2: s2 in s1 \n\n\nstr_test(\"Opera is fun\", \"is\")\n\nTrue\n\n\n\nstr_test(\"Opera is fun\", \"gasket\")\n\nFalse\n\n\n\n\nExercise 4.9\n\nWrite three lambda functions:\n\nc2f that converts a Celsius (C) value to Farenheit (F), given \\(F = 1.8C + 32\\).\nf2c that converts an F value to C, given \\(C = (F - 32)/1.8\\)\nt2t that combines the two previous functions and takes two arguments:\n\nan integer representing the temperature in either F or C.\na character representing the temparture scale to convert to, either ‘f’ or ‘c’.\n\n\nIn addition:\n\nHave t2t return the converted temperature as an integer by rounding the result.\nAND instead of using an if statement in t2t, have it use a dictionary that contains elements for the two converter functions, i.e. c2f and f2c.\n\n\nFor example, if have a temperature of \\(45\\) C and want to know what this is in F, it should work like this:\n&gt;&gt;&gt; f = t2t(45, 'f')\n&gt;&gt;&gt; print(f)\n&gt;&gt;&gt; 113\n\nc2f = lambda cval: 1.8 * cval + 32\n\n\nc2f(45)\n\n113.0\n\n\n\nf2c = lambda fval: (fval - 32) / 1.8\n\n\nf2c(113)\n\n45.0\n\n\n\ntargets = {\n    'f': c2f,\n    'c': f2c\n}\n\n\nt2t = lambda tval, target: round(targets[target](tval))\n\n\nf = t2t(45, 'f')\n\n\nprint(f)\n\n113\n\n\nOr, more compactly:\n\ntargets = {\n    'f': lambda cval: 1.8 * cval + 32,\n    'c': lambda fval: (fval - 32) / 1.8\n}\nt2t = lambda tval, target: round(targets[target](tval))\n\n\nt2t(45, 'f')\n\n113\n\n\nThe most compact\n\n(lambda tval, target: round({'f': lambda cval: 1.8 * cval + 32, 'c': lambda fval: (fval - 32) / 1.8}[target](tval)))(45, 'f')\n\n113\n\n\n\n(lambda tval, target: \n     round(\n         {\n            'f': lambda cval: 1.8 * cval + 32, \n            'c': lambda fval: (fval - 32) / 1.8\n         }[target](tval)\n     )\n)(45, 'f')\n\n113\n\n\n\n\nRecursion\n\n\nExercise 4.10\nUse this pattern to generate the next 4 terms (by hand)\nFib(2) = Fib(1) + Fib(0) = 1 + 0 = 1 \nFib(3) = Fib(2) + Fib(1) = 1 + 1 = 2  \nFib(4) = Fib(3) + Fib(2) = 2 + 1 = 3  \nFib(5) = Fib(4) + Fib(3) = 3 + 2 = 5\nNow, write a Python function fibonacci() to return the nth term in the sequence.\nSpecifically, write the function with these requirements: - takes an integer n as input - includes the rules that defines the sequence - computes the nth term in the sequence, using recursion (the function will call itself) - returns the computed term\nCall fibonacci(n) for \\(n = 0, 1, 2, 3, 4, 5\\) and verify it works properly.\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\nprint(fibonacci(0))\nprint(fibonacci(1))\nprint(fibonacci(2))\nprint(fibonacci(3))\nprint(fibonacci(4))\nprint(fibonacci(5))\n\n0\n1\n1\n2\n3\n5\n\n\n\nfor n in range(6): print(fibonacci(n))\n\n0\n1\n1\n2\n3\n5\n\n\nThink about how this works … it’s very cool!\nIf you call fibonacci(2), - flow goes to the else statement, - which calls fibonacci(1) and fibonacci(0), - so those need to get computed,\n- fibonacci(1) goes to the elif, returning 1 - fibonacci(0) goes to the if, returning 0\n- back in the else statement, fibonacci(1) and fibonacci(0) =&gt; 1 + 0 = 1\nIf you call fibonacci(3), a similar pattern occurs, with even more computes taking place.\nHow many times will fibonacci get called?\n\ncalls = 0\ndef fibonacci_test(n):\n    global calls\n    calls += 1\n    print('call:', calls, 'n:', n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_test(n-1) + fibonacci_test(n-2)\n\n\nfibonacci_test(3)\n\ncall: 6 n: 3\ncall: 7 n: 2\ncall: 8 n: 1\ncall: 9 n: 0\ncall: 10 n: 1\n\n\n2\n\n\n\nfibonacci(5.1)\n\nNameError: name 'fibonacci' is not defined\n\n\n\nfibonacci(-1)\n\nRecursionError: maximum recursion depth exceeded in comparison\n\n\nIf it worked properly, excellent!\nIf not, you might want to rewrite your function below to handle such edge cases.\nSpecifically, have the function return the value -1 for invalid n.\nReminder: the sequence is defined for whole numbers (0, 1, 2, …)\nCall the function again, and verify the cases work properly.\n\ndef fibonacci_robust(n):\n    \n    if (not isinstance(n, int)) or (n &lt; 0):\n        return -1\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_robust(n-1) + fibonacci_robust(n-2)\n\n\n# edge cases\nprint(fibonacci_robust(5.1))\nprint(fibonacci_robust(-1))\n\n# valid cases\nprint(fibonacci_robust(0))\nprint(fibonacci_robust(1))\nprint(fibonacci_robust(2))\nprint(fibonacci_robust(3))\nprint(fibonacci_robust(4))\nprint(fibonacci_robust(5))\n\n-1\n-1\n0\n1\n1\n2\n3\n5\n\n\n\n\nExtra\n\n\nExercise 4.11\nDemonstration of variable interpolation\nWrite a Python program that allows users to play the MadLibs® game, using the example story sheet provided.\nCapture the values for each blank by using the input() function.\nAbout MadLibs®: In this game, a player is prompted to supply a series of parts of speech (noun, adjective, past tense noun, etc.) while a second player adds these to a story sheet that contains blanks for each response. The story is not visible to the player supplying the words. Once all the blanks are filled, the second player reads the story aloud, which is often funny because of the random way the words are assigned to the story.\nThis is an example of MadLib story sheet:\nToday I went to the zoo. I saw a(n) ___________(adjective)\n_____________(Noun) jumping up and down in its tree.\nHe _____________(verb, past tense) __________(adverb)\nthrough the large tunnel that led to its _______(adjective)\n__________(noun). I got some peanuts and passed\nthem through the cage to a gigantic gray _______(noun)\ntowering above my head. Feeding that animal made\nme hungry. I went to get a __________(adjective) scoop\nof ice cream. It filled my stomach. Afterwards I had to\n__________(verb) __________ (adverb) to catch our bus.\nWhen I got home I __________(verb, past tense) my\nmom for a __________(adjective) day at the zoo.\n\ndef madlibs1():\n    \n    words = dict(adjective1 = '', \n                 noun1 = '', \n                 verb_past_tense1 = '', \n                 adverb1 = '',\n                 adjective2 = '', \n                 noun2 = '', \n                 noun3 = '', \n                 adjective3 = '', \n                 verb1 = '', \n                 adverb2 = '', \n                 verb_past_tense2 = '', \n                 adjective4 = '')\n    \n    for pos in words:\n        prompt = pos.replace('_', ' ')[:-1] # Assumes single digit suffix\n        words[pos] = input(f\"Enter a(n) {prompt}: \")\n    \n    text = f\"Today I went to the zoo.\\nI saw a(n) {words['adjective1']} \\\n{words['noun1']} jumping up and down in its tree.\\n\\\nHe {words['verb_past_tense1']} {words['adverb1']} through the large tunnel \\\nthat led to its {words['adjective2']} {words['noun2']}.\\nI got some peanuts and passed \\\nthem through the cage to a gigantic gray {words['noun3']} \\\ntowering above my head.\\nFeeding that animal made \\\nme hungry.\\nI went to get a {words['adjective3']} scoop \\\nof ice cream.\\nIt filled my stomach.\\nAfterwards I had to \\\n{words['verb1']} {words['adverb2']} to catch our bus.\\n\\\nWhen I got home I {words['verb_past_tense2']} my \\\nmom for a {words['adjective4']} day at the zoo.\"\n    \n    print(text)\n\nmadlibs1()\n\nToday I went to the zoo.\nI saw a(n) dfsdf sdf jumping up and down in its tree.\nHe sdafsd fasd through the large tunnel that led to its fsad fasd.\nI got some peanuts and passed them through the cage to a gigantic gray f towering above my head.\nFeeding that animal made me hungry.\nI went to get a asdf scoop of ice cream.\nIt filled my stomach.\nAfterwards I had to sda f to catch our bus.\nWhen I got home I sadf my mom for a ads day at the zoo."
  },
  {
    "objectID": "exercises/M08-Exercises.html",
    "href": "exercises/M08-Exercises.html",
    "title": "M08 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential\n\nExercise 8.1\nWrite a try/except statement to handle a ZeroDivisionError exception.\nVerify it works properly.\n\nx = 5\ny = 0\n\ntry: \n    z = x / y\n    print('z=', z)\nexcept ZeroDivisionError as e:\n    print('Caught an exception! Error message:', e)\n\nCaught an exception! Error message: division by zero\n\n\n\ny1 = 1\n\ntry: \n    z = x / y1\n    print('z=', z)\nexcept ZeroDivisionError as e:\n    print('Caught an exception!', e)\n\nz= 5.0\n\n\n\n\nExercise 8.2\nWrite two simple boolean expressions, one True and one False.\nUse an assert statement to test each.\n\nx2 = 2 + 2 == 4\nassert x2, \"This is not 1984!\"\n\n\nx3 = 2 + 2 == 5\nassert x3, \"This is not 1984!\"\n\nAssertionError: This is not 1984!\n\n\n\nx = True\nassert x, \"x should be True!\"\n\n\nx = False\nassert x, \"x should be True!\"\n\nAssertionError: x should be True!\n\n\n\n\nExercise 8.3\nWrite a function area() that s accepts the argument radius and calculates the area of a circle.\nThen write three tests using assert statements for the following conditions:\n\nAssert that area(1) returns a float;\nAssert that area(0) returns a value of 0;\nAssert that area(5) is approximately equal to 78.5 (hint: math.isclose(..., abs_tol=0.1))\n\nYou can use also the math module to get pi.\n\nfrom math import pi as π\n\ndef area(radius):\n    \"\"\"Calculate the area of a circle based on the given radius.\"\"\"\n    return π * radius**2\n\n\nassert isinstance(area(1), float), 'Test 1 failed!'\nassert area(0) == 0, 'Test 2 failed!'\nassert math.isclose(area(5), 78.5, abs_tol = 0.1), 'Test 3 failed!'\n\n\n\nExercise 8.4\nCopy the file student.py from the course repo to your private repo.\nAdd a new method to student.py called unenroll_in_course().\nThe method should raise an exception if the student is not enrolled in the course.\nThen write a unit test file student_test.py with unittest methods that do the following:\n\ntest_01 tests the incrementer works.\ntest_02 tests a course is actually removed with the new method.\ntest_03 tests to see if the new method does not increment courses if the student was not enrolled in the course to begin with.\n\nNote that we are using num_courses as a counter when we could have used len(set(self.courses)) to get the number of courses. This is just for demonstration purposes.\nRun the test script and see your results.\nclass Student:\n    \n    def __init__(self, name, courses=None):\n        self.name = name # string type\n        self.courses = [] if courses is None else courses # list of strings\n        self.num_courses = len(self.courses)\n        \n    def enroll_in_course(self, course_name):\n        \"Enrolls the student in a course.\"\n        self.courses.append(course_name)\n        self.num_courses += 1 # increment the number of courses\n    \n    def unenroll_in_course(self, course_name):\n        \"Unenrolls the student from a course.\"\n        if course_name in self.courses:\n            self.courses.remove(course_name)\n            self.num_courses -= 1 # decrememt the number of courses\n        else:\n            # print(\"Student was not enrolled in that course\")\n            # raise Exception(\"Student was not enrolled in that course\")\n            raise ValueError(\"Date provided can't be in the past\")\nfrom student import Student\nimport unittest\n\nclass EnrollInTestCase(unittest.TestCase): \n    \n    def test_01_is_numCoursincremented_correctly(self):\n        student1 = Student('Katherine', ['DS 5100']) # Initialize\n        student1.enroll_in_course(\"CS 5050\")         # Add a course\n        student1.enroll_in_course(\"CS 5777\")         # Add another course \n        actual = student1.num_courses                # Get actual course count\n        expected = 3                                 # Define true course count \n        self.assertEqual(actual, expected)           # Values should be equal\n        \n    def test_02_is_course_removed(self):\n        student1 = Student('Katherine', ['DS 5100']) # Initialize\n        course = \"CS 5050\"                           # Define a course name\n        student1.enroll_in_course(course)            # Add the course\n        student1.unenroll_in_course(course)          # Remove the course\n        self.assertFalse(course in student1.courses) # Course should not be in list\n\n    def test_03_is_course_not_added(self):\n        student1 = Student('Katherine', ['DS 5100']) # Initialize\n        expected = len(student1.courses)             # Get number of courses\n        course = \"CS 5050\"                           # Define a course name that is not in the list\n        student1.unenroll_in_course(course)          # Remove that new course -- should fail\n        actual = len(student1.courses)               # Get number of courses after this operation\n        self.assertEqual(actual, expected)           # There should be no change in the number\n        \n        \nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python student2.py\n\n\n!python student2_test.py \n\ntest_01_is_numCoursincremented_correctly (__main__.EnrollInTestCase.test_01_is_numCoursincremented_correctly) ... ['DS 5100', 'CS 5050', 'CS 5777']\n3\nok\ntest_02_is_course_removed (__main__.EnrollInTestCase.test_02_is_course_removed) ... ok\ntest_03_is_course_not_added (__main__.EnrollInTestCase.test_03_is_course_not_added) ... Student was not enrolled in that course.\nok\n\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\n\nOK\n\n\n\n!python student_test.py 2&gt; test-results.txt\n\n['DS 5100', 'CS 5050', 'CS 5777']\n3\nStudent was not enrolled in that course\n\n\n\n!more test-results.txt\n\ntest_01_is_numCoursincremented_correctly (__main__.EnrollInTestCase.test_01_is_numCoursincremented_correctly) ... ok\ntest_02_is_course_added (__main__.EnrollInTestCase.test_02_is_course_added) ... ok\ntest_03_is_course_not_added (__main__.EnrollInTestCase.test_03_is_course_not_added) ... ok\n\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\n\nOK\nesults.txt (END)\n\n\n\n\nExercise 8.5\nCreate a class called Car and a class that inherits from this class called Subaru.\nFor the Car class, add the following attributes and methods: - body_type which takes the values suv, crossover, sedan, hatchback, sport - engine_type: which takes the values electric, gas, diesel, hybrid - __init__(): which takes values for the two attributes - describe_car(): which returns a string with the body and engine types as f\"{engine_type} {body_type}\"\nThe object should raise a ValueError exception if either of the values passed to the attributes are not in the specified lists of values.\nFor the Subaru class, add the folliwing: - year: the four-number year of manufacture, e.g. \\(2023\\) - model: the specific model of the car, e.g. “outback” - trim: the special trim of the car, e.g. “sport” - __init__(): which takes values for the previous attributes and the Car attributes. - describe(): which returns a string with the year, model, and trim, and with the Car description in parentheses.\nThen create a new Subaru object and initialize it with the following values: - body_type = 'crossover' - engine_type = 'gas' - year = '2022' - model = 'outback' - trim = 'sport'\nThen call the describe method.\n\nclass Car:\n    \n    body_types = [\"suv\", \"crossover\", \"sedan\", \"hatchback\", \"sport\"]\n    engine_types = [\"electric\", \"gas\", \"diesel\", \"hybrid\"]\n    \n    def __init__(self, body_type, engine_type):\n        if body_type not in self.body_types:\n            raise ValueError(\"Invalid body type.\")\n        if engine_type not in self.engine_types:\n            raise ValueError(\"Invalid engine type.\")\n        self.body_type = body_type\n        self.engine_type = engine_type\n        \n    def describe_car(self):\n        return f\"{self.engine_type} {self.body_type}\"\n        \nclass Subaru(Car):\n    \n    def __init__(self, body_type, engine_type, year, model, trim=None):\n        self.year = year\n        self.model = model\n        self.trim = trim\n        Car.__init__(self, body_type, engine_type)\n        # super().__init__(body_type, engine_type) # Another option\n\n    def describe(self):\n        return f\"{self.year} {self.model} {self.trim} ({self.describe_car()})\"\n\n\nmy_args = dict(\n    body_type = 'crossover',\n    engine_type = 'gas',\n    year = '2022',\n    model = 'outback',\n    trim = 'sport'\n)\nmy_car = Subaru(**my_args)\n\n\nmy_car.describe()\n\n'2022 outback sport (gas crossover)'\n\n\n\ntry:\n    my_car = Subaru(**my_args)\nexcept ValueError as e:\n    print(e)"
  },
  {
    "objectID": "exercises/M10-Exercises.html",
    "href": "exercises/M10-Exercises.html",
    "title": "M10 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential"
  },
  {
    "objectID": "exercises/M10-Exercises.html#demo-1",
    "href": "exercises/M10-Exercises.html#demo-1",
    "title": "M10 Exercises",
    "section": "Demo 1",
    "text": "Demo 1\nSee the difference between local and global variables in R.\n\nx0 = 1 # A global by virtue of location in script \n\nf0 &lt;- function() print(paste('Global x0 =', x0))\n                       \nf1 &lt;- function() {\n    x1 &lt;- 10    # A local by virtue of location in function\n    print(paste('Local x1 =', x1))\n}\n\nf2 &lt;- function() {\n    x2 &lt;&lt;- 20  # A global by virtue of special assignment\n    print(paste('Global x2 =', x2))\n}\n\n\nf0()\n\n[1] \"Global x0 = 1\"\n\n\n\nf1()\nx1\n\n[1] \"Local x1 = 10\"\n\n\nERROR: Error in eval(expr, envir, enclos): object 'x1' not found\n\n\n\nf2()\nx2\n\n[1] \"Global x2 = 20\"\n\n\n20"
  },
  {
    "objectID": "exercises/M06-Exercises.html",
    "href": "exercises/M06-Exercises.html",
    "title": "M06 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential\n\nSet Up\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n\nnp.__version__\n\n'1.24.4'\n\n\n\npd.__version__\n\n'2.0.3'\n\n\n\n\nExercise 6.1\nCreate a dataframe called df by passing a dictionary of inputs with the following keys and values:\n\nfeatures containing floats\nlabels containing integers \\(0, 1, 2\\)\n\nEach value should be a list of four or five elements.\nHint: Pass the dict to pd.DataFrame().\nThen print the dataframe.\n\ndf = pd.DataFrame({\n    'features': [0.2, -1.1, 1.6, 5.4], \n    'labels': [1, 1, 0, 2]\n})\n\n\ndf\n\n\n\n\n\n\n\n\n\nfeatures\nlabels\n\n\n\n\n0\n0.2\n1\n\n\n1\n-1.1\n1\n\n\n2\n1.6\n0\n\n\n3\n5.4\n2\n\n\n\n\n\n\n\n\n\n\nExercise 6.2\nRename the labels column in df to label.\n\ndf = df.rename(columns={'labels': 'label'})\n\n\ndf\n\n\n\n\n\n\n\n\n\nfeatures\nlabel\n\n\n\n\n0\n0.2\n1\n\n\n1\n-1.1\n1\n\n\n2\n1.6\n0\n\n\n3\n5.4\n2\n\n\n\n\n\n\n\n\n\n\nExercise 6.3\nImport the iris dataset from Seaborn and the sort by species, descending.\nHint:\niris = sns.load_dataset('iris')\n\niris = sns.load_dataset('iris') \n\n\niris.sort_values('species', ascending=False)\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n111\n6.4\n2.7\n5.3\n1.9\nvirginica\n\n\n122\n7.7\n2.8\n6.7\n2.0\nvirginica\n\n\n121\n5.6\n2.8\n4.9\n2.0\nvirginica\n\n\n120\n6.9\n3.2\n5.7\n2.3\nvirginica\n\n\n...\n...\n...\n...\n...\n...\n\n\n31\n5.4\n3.4\n1.5\n0.4\nsetosa\n\n\n30\n4.8\n3.1\n1.6\n0.2\nsetosa\n\n\n29\n4.7\n3.2\n1.6\n0.2\nsetosa\n\n\n28\n5.2\n3.4\n1.4\n0.2\nsetosa\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\niris.sort_values('species', ascending=False)\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n111\n6.4\n2.7\n5.3\n1.9\nvirginica\n\n\n122\n7.7\n2.8\n6.7\n2.0\nvirginica\n\n\n121\n5.6\n2.8\n4.9\n2.0\nvirginica\n\n\n120\n6.9\n3.2\n5.7\n2.3\nvirginica\n\n\n...\n...\n...\n...\n...\n...\n\n\n31\n5.4\n3.4\n1.5\n0.4\nsetosa\n\n\n30\n4.8\n3.1\n1.6\n0.2\nsetosa\n\n\n29\n4.7\n3.2\n1.6\n0.2\nsetosa\n\n\n28\n5.2\n3.4\n1.4\n0.2\nsetosa\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\n\nExercise 6.4\nUse .value_counts() to find out how many records of each species the dataset has.\n\niris.species.value_counts().to_frame('n')\n\n\n\n\n\n\n\n\n\nn\n\n\nspecies\n\n\n\n\n\nsetosa\n50\n\n\nversicolor\n50\n\n\nvirginica\n50\n\n\n\n\n\n\n\n\n\niris\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\n\nExercise 6.5\nPrint the number of records in iris where petal_length \\(&lt;= 1.4\\) or petal_length \\(&gt;= 1.6\\)\nHint: Remember how to implement “or” in Pandas.\nHint: Subset using boolean indexing, and count the number of resulting records with len() or .shape[0].\n\nlen(iris[(iris.petal_length &lt;= 1.4) | (iris.petal_length &gt;= 1.6)])\n\n137\n\n\n\niris[(iris.petal_length &lt;= 1.4) | (iris.petal_length &gt;= 1.6)].shape[0]\n\n137\n\n\n\n\nExercise 6.6\nUse .apply() to append a new column that displays the minimum of (petal_length, petal_width) for each observation.\nDisplay the head, tail of the new dataframe to check if things look correct.\n\niris['min_petal'] = iris.apply(lambda x: min(x.petal_length, x.petal_width), axis=1)\n\n\niris.head()\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\nmin_petal\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n0.2\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n0.2\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n0.2\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n0.2\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n0.2\n\n\n\n\n\n\n\n\n\niris.tail()\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\nmin_petal\n\n\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n2.3\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n1.9\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n2.0\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n2.3\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n1.8\n\n\n\n\n\n\n\n\nBonus\n\nsum(iris.petal_length &lt;= iris.petal_width)\n\n0\n\n\n\niris[['petal_length','petal_width']].idxmin(axis=1).value_counts()\n\npetal_width    150\nName: count, dtype: int64\n\n\n\n\nExercise 6.7\nUse a pivot table to compute the following statistics on sepal_width and petal_width grouped by species:\n\nmedian\n\nmean\n\nThese can be computed together in a single call to pd.pivot_table().\n\npd.pivot_table(iris, \n               values = [\"sepal_width\", \"petal_width\"], \n               columns = [\"species\"], \n               aggfunc = {np.mean, np.median})  # Braces groups rows\n\n\n\n\n\n\n\n\n\nspecies\nsetosa\nversicolor\nvirginica\n\n\n\n\npetal_width\nmean\n0.246\n1.326\n2.026\n\n\nmedian\n0.200\n1.300\n2.000\n\n\nsepal_width\nmean\n3.428\n2.770\n2.974\n\n\nmedian\n3.400\n2.800\n3.000\n\n\n\n\n\n\n\n\n\npd.pivot_table(iris, \n               values = [\"sepal_width\", \"petal_width\"], \n               columns = [\"species\"], \n               aggfunc = [np.mean, np.median]) # Brackets groups cols\n\n\n\n\n\n\n\n\n\nmean\nmedian\n\n\nspecies\nsetosa\nversicolor\nvirginica\nsetosa\nversicolor\nvirginica\n\n\n\n\npetal_width\n0.246\n1.326\n2.026\n0.2\n1.3\n2.0\n\n\nsepal_width\n3.428\n2.770\n2.974\n3.4\n2.8\n3.0\n\n\n\n\n\n\n\n\n\npd.pivot_table(iris, \n               values = [\"sepal_width\", \"petal_width\"], \n               columns = [\"species\"], \n               aggfunc = [np.mean, np.median]).T # Brackets groups cols\n\n\n\n\n\n\n\n\n\n\npetal_width\nsepal_width\n\n\n\nspecies\n\n\n\n\n\n\nmean\nsetosa\n0.246\n3.428\n\n\nversicolor\n1.326\n2.770\n\n\nvirginica\n2.026\n2.974\n\n\nmedian\nsetosa\n0.200\n3.400\n\n\nversicolor\n1.300\n2.800\n\n\nvirginica\n2.000\n3.000\n\n\n\n\n\n\n\n\n\n\nExercise 6.8\nCreate two data frames with a common index column, such as a first name, and a single feature column, such as age or gender or height.\nMake sure: * The two dataframes have different feature columns. * Some of the key values in the two columns are shared. * Each key column has a unique set of values. * Also make sure the two key columns don’t have an identical list of values.\nThe two tables can be of different lengths.\nUse merge to join the tables using an inner join.\nUse join to join the tables using an outer join.\n\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"lval\": [15, 22]})\nleft = left.set_index('key')\n\n\nleft\n\n\n\n\n\n\n\n\n\nlval\n\n\nkey\n\n\n\n\n\njamie\n15\n\n\nbill\n22\n\n\n\n\n\n\n\n\n\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"rval\": [4, 5, 8]})\nright = right.set_index('key')\n\n\nright\n\n\n\n\n\n\n\n\n\nrval\n\n\nkey\n\n\n\n\n\njamie\n4\n\n\nbill\n5\n\n\nasher\n8\n\n\n\n\n\n\n\n\n\ninner = pd.merge(left, right, on=\"key\", how=\"inner\")\n\n\ninner\n\n\n\n\n\n\n\n\n\nlval\nrval\n\n\nkey\n\n\n\n\n\n\njamie\n15\n4\n\n\nbill\n22\n5\n\n\n\n\n\n\n\n\n\nouter = left.join(right, how='outer')\n\n\nouter\n\n\n\n\n\n\n\n\n\nlval\nrval\n\n\nkey\n\n\n\n\n\n\nasher\nNaN\n8\n\n\nbill\n22.0\n5\n\n\njamie\n15.0\n4\n\n\n\n\n\n\n\n\n\n\nExercise 6.9\nCreate a series with the data \\([1, 1, 2, 3, 5, 8]\\).\nExtract the data from the series in a NumPy array and reshape to \\(2 \\times 3\\).\nPrint both the reshaped data and its dimensions.\n\nser = pd.Series([1, 1, 2, 3, 5, 8])\nvals = ser.values\nresh = vals.reshape(2,3)\n\n\nresh\n\narray([[1, 1, 2],\n       [3, 5, 8]])\n\n\n\nresh.shape\n\n(2, 3)\n\n\n\n\nExercise 6.10\nThe dataframe below contains two categoricals.\nDummify each of them, giving them an appropriate prefix and dropping the first level from each.\ncats = pd.DataFrame({\n    'breed':['persian','persian','siamese','himalayan','burmese'], \n    'color':['calico','white','seal point','cream','sable']\n})\nHint: You can pass a list to the prefix parameter to apply prefixes to more than one column.\n\ncats = pd.DataFrame({\n    'breed':['persian', 'persian', 'siamese', 'himalayan', 'burmese'], \n    'color':['calico', 'white', 'seal point', 'cream', 'sable']\n})\n\n\ncats\n\n\n\n\n\n\n\n\n\nbreed\ncolor\n\n\n\n\n0\npersian\ncalico\n\n\n1\npersian\nwhite\n\n\n2\nsiamese\nseal point\n\n\n3\nhimalayan\ncream\n\n\n4\nburmese\nsable\n\n\n\n\n\n\n\n\n\ncats_combo = pd.get_dummies(cats, prefix=['b','c'])\n\n\ncats_combo\n\n\n\n\n\n\n\n\n\nb_burmese\nb_himalayan\nb_persian\nb_siamese\nc_calico\nc_cream\nc_sable\nc_seal point\nc_white\n\n\n\n\n0\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n2\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n3\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n4\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n\n\n\n\n\n\nNo prefix\n\npd.get_dummies(cats)\n\n\n\n\n\n\n\n\n\nbreed_burmese\nbreed_himalayan\nbreed_persian\nbreed_siamese\ncolor_calico\ncolor_cream\ncolor_sable\ncolor_seal point\ncolor_white\n\n\n\n\n0\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n2\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n3\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n4\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n\n\n\n\n\n\n\npd.get_dummies(cats).T\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\nbreed_burmese\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nbreed_himalayan\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\nbreed_persian\nTrue\nTrue\nFalse\nFalse\nFalse\n\n\nbreed_siamese\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\ncolor_calico\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\ncolor_cream\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\ncolor_sable\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\ncolor_seal point\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\ncolor_white\nFalse\nTrue\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "exercises/M07-Notes.html",
    "href": "exercises/M07-Notes.html",
    "title": "M07 Notes",
    "section": "",
    "text": "M05 Quiz\n\n\n\nimage.png\n\n\n\nShape is represented here without parentheses, so there is no need to use the comma on a single value.\nThe answer is clearly not two values. This is the salient point. Even if this were a syntactic error, the logical answer would not be two values.\n\n\n\nNumPy\n\nStructured arrays can actually store mixed data types.\n\nApparently, this has been a feature of NumPy since version 1.0, released in 2006.\nIt’s odd, then, that NumPy arrays are often introduced as requiring a single data type. 🤔\n\nUse df.to_numpy() to convert Pandas dataframes to NumPy data structures.\n\nHere is an example.\nWe create a list of tuples of mixed data, one tuple per row of data.\n\nimport numpy as np\n\n\ndata = [\n    ('Alice', 25, 55.0), \n    ('Bob', 32, 60.5),\n    ('Sri', 39, 70.)\n]\n\nWe also create a list of tuples for each column, specifying name and data type.\n\ndtypes = [('name', 'U10'), ('age', 'i4'), ('weight', 'f4')]\n\nWe pass these to the NumPy’s array constructor.\n\npeople = np.array(data, dtype=dtypes)\n\nThis returns a structured array.\n\npeople\n\narray([('Alice', 25, 55. ), ('Bob', 32, 60.5), ('Sri', 39, 70. )],\n      dtype=[('name', '&lt;U10'), ('age', '&lt;i4'), ('weight', '&lt;f4')])\n\n\nData may be accessed using column names.\n\npeople['name']\n\narray(['Alice', 'Bob', 'Sri'], dtype='&lt;U10')\n\n\nWe see that its data type is just an ndarray.\n\ntype(people)\n\nnumpy.ndarray\n\n\nWe an also access the data type list as an attribute of the array.\n\npeople.dtype\n\ndtype([('name', '&lt;U10'), ('age', '&lt;i4'), ('weight', '&lt;f4')])\n\n\nIn Pandas, we can convert data back to a NumPy data structure with df.to_numpy().\nThis is preferrable to df.values().\n\nimport pandas as pd\n\nHere we convert the NumPy array to a Pandas dataframe.\n\ndf = pd.DataFrame(data)\n\n\ndf\n\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\nAlice\n25\n55.0\n\n\n1\nBob\n32\n60.5\n\n\n2\nSri\n39\n70.0\n\n\n\n\n\n\n\n\nThen we convert back to a NumPy array …\n\nnpa = df.to_numpy()\n\n\nnpa\n\narray([['Alice', 25, 55.0],\n       ['Bob', 32, 60.5],\n       ['Sri', 39, 70.0]], dtype=object)\n\n\n\ntype(npa)\n\nnumpy.ndarray\n\n\nInterestingly, the datatype is different.\nIt’s now a Python object.\n\nnpa.dtype\n\ndtype('O')\n\n\n\n\nLutz\nWhy use classes?\n\nBecause using classes well requires some up-front planning, they tend to be of more interest to people who work in strategic mode (doing long-term product development) than to people who work in tactical mode (where time is in very short supply).\n\nIntroduces principle of composition: Use objects as components that are combined to create a solution.\nLutz foregrounds inheritance, but I consider the ideas of encapsulation and composition (above) as primary.\n\n\nClass Attributes\nhttps://ontoligent.github.io/DS5100-2024-01-O/notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html\n\nclass Foo(): \n    x = 1\n    y = []\n\n\nfoo1 = Foo()\n\n\nfoo1.x = 2\n\n\nFoo.x, foo1.x\n\n(1, 2)\n\n\n\nfoo2 = Foo()\n\n\nFoo.x = 2\n\n\nFoo.x, foo2.x\n\n(2, 2)\n\n\n\n# foo1.y = [10]\n\n\nfoo1.y.append(10)\n\n\nFoo.y\n\n[10]\n\n\n\nfoo1.y\n\n[10]\n\n\n\nfoo2.y\n\n[10]"
  },
  {
    "objectID": "exercises/M03-Exercises.html",
    "href": "exercises/M03-Exercises.html",
    "title": "M03 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential"
  },
  {
    "objectID": "exercises/M03-Exercises.html#method-1",
    "href": "exercises/M03-Exercises.html#method-1",
    "title": "M03 Exercises",
    "section": "Method 1",
    "text": "Method 1\n\nxx = [-2, 8, 0, 5, 6]\n\n\nmax_val = max(xx)\n\n\nfor x in xx:\n    if x &lt; max_val:\n        print(x)\n    else:\n        print('max_val')\n\n-2\nmax_val\n0\n5\n6"
  },
  {
    "objectID": "exercises/M03-Exercises.html#method-2",
    "href": "exercises/M03-Exercises.html#method-2",
    "title": "M03 Exercises",
    "section": "Method 2",
    "text": "Method 2\n\nfor x in xx:\n    print(x) if x &lt; max_val else print('max_val')\n\n-2\nmax_val\n0\n5\n6"
  },
  {
    "objectID": "exercises/M03-Exercises.html#method-3",
    "href": "exercises/M03-Exercises.html#method-3",
    "title": "M03 Exercises",
    "section": "Method 3",
    "text": "Method 3\nJumping ahead to next week (Lambda λ functions)\n\n_ = [(lambda x: print(x) if x &lt; max_val else print('max_val'))(x) for x in xx]\n\n-2\nmax_val\n0\n5\n6"
  },
  {
    "objectID": "exercises/M03_Exercise.html",
    "href": "exercises/M03_Exercise.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "val=5\n\nif -10&lt; val &lt;-5:\n    print('bucket1')\nelif -5 &lt;= val &lt;-2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nNothing happens\n\nval=5\n\nif -10&lt; val &lt;-5:\n    print('bucket1')\nelif -5 &lt;= val &lt;-2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4\n\n\n\nxx = [-2,8,0,5,6]\nmax_val = max(xx)\nfor val in xx:\n    if val &lt; max_val:\n        print(val)\n    else:\n        print('max_val')\n    \n\n-2\nmax_val\n0\n5\n6\n\n\n\nit = 0 \nmax_iter = 100\nwhile it &lt; max_iter:\n    if (it == 0) or (it % 10 == 0):\n        print(it)\n    it += 1\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n\n\n\nstates = [ 'Alabama', 'Colorado', 'Texas', 'Virginia']\nfor st in states:\n    print(st.lower())\n\nalabama\ncolorado\ntexas\nvirginia\n\n\n\n_ = [print(st.lower()) for st in states]\n\nalabama\ncolorado\ntexas\nvirginia\n\n\n\ns= iter(states)\nfor st in iter(s):\n    print(states)    \n\n['Alabama', 'Colorado', 'Texas', 'Virginia']\n['Alabama', 'Colorado', 'Texas', 'Virginia']\n['Alabama', 'Colorado', 'Texas', 'Virginia']\n['Alabama', 'Colorado', 'Texas', 'Virginia']\n\n\n\ncities = {'Palo Alto': 94306, 'Frisco':76706}\nfor ci, zi in cities.items(): \n    print(ci,zi)\n       \n\nPalo Alto 94306\nFrisco 76706\n\n\n\nprint(\"\\n\".join([f\"{ci} {zi}\" for ci, zi in cities.items()]))\n\nPalo Alto 94306\nFrisco 76706\n\n\n\nfor ci in cities.keys():\n    print(ci, cities[ci])\n\nPalo Alto 94306\nFrisco 76706\n\n\n\nnumbers = [1,4,8,10,24,78]\ncubes = [num**3 for num in numbers]\ncubes\n\n[1, 64, 512, 1000, 13824, 474552]\n\n\n\nlist01= ['21', 'Dog', 'Purple', '7', 'Cheese','10', '16']\nnumbers = [val for val in list01 if val.isdigit()]\nnumbers\n\n['21', '7', '10', '16']"
  },
  {
    "objectID": "exercises/exercise3.1.html",
    "href": "exercises/exercise3.1.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "val=5\n\nif -10&lt; val &lt;-5:\n    print('bucket1')\nelif -5 &lt;= val &lt;-2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nNothing happens\n\nval=5\n\nif -10&lt; val &lt;-5:\n    print('bucket1')\nelif -5 &lt;= val &lt;-2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4"
  },
  {
    "objectID": "activities/module3-inclass.html",
    "href": "activities/module3-inclass.html",
    "title": "Module 3 | In-Class",
    "section": "",
    "text": "model_arch = {'cnn_1':'15 layers', 'cnn_2':'20 layers', 'rnn': '10 layers'}\n\n# create a new dict containing only key-value pairs where the key contains 'cnn'\n\ncnns = {key:value for key, value in model_arch.items() if 'cnn' in key}\ncnns\n\n{'cnn_1': '15 layers', 'cnn_2': '20 layers'}\n\n\n\nExercise 3.2\n\nxx = [-2, 8, 0, 5, 6]\nmax_val = max(xx)\nfor val in xx:\n    print(val) if val &lt; max_val else print(\"max_val\")\n\n\n\nExercise 3.3\n\nit = 0 \nmax_iter = 100\nwhile it &lt; max_iter:\n    if (it == 0) or (it % 10 == 0):\n        print(it)\n    it += 1\n\n\n\nExercise 3.4\n\nnouns = [\"Chad\", \"John\", \"Jones\", \"Tom\"]\n_ = [print(name.lower()) for name in nouns]\n\n\n\nExercise 3.5\n\nfor name in iter(nouns):\n    print(name)\n\n\n\nExercise 3.6\n\ncities = {'Fredericksburg': 22407, \"King George\": 22485}\n_ = {print(f\"city: {key}, zip: {value}\") for key, value in cities.items()}\n\n\n\nExercise 3.7\n\n_ = {print(f\"city: {city}, zip: {cities[city]}\") for city in cities.keys()}\n\n\n\nExercise 3.8\n\n_ = [print(x**3) for x in [2, 4, 6, 8]]\n\n\n\nExercise 3.9\n\nmy_list = ['12', 'cat', '1', 'dog', '23', 'birb', '8']\nprint([x for x in my_list if x.isdigit()])"
  },
  {
    "objectID": "activities/M02-01-Activity-Hello-World.html",
    "href": "activities/M02-01-Activity-Hello-World.html",
    "title": "Activity: Hello, World!",
    "section": "",
    "text": "In this activity, you will run Python from the command line and become acquainted with its most basic mode of operation.\nTo get started, log onto the Rivanna shell and move into in the course directory you created for this class.\n\n\nOnce you are in Rivanna, you will want to know which version of Python you have installed as the default.\nTo find out, from the command line type:\nwhich python\nThis will show you the “path” to a python interpreter. For example:\n\nIf you do not see “anaconda” in that path, then run the following command:\nmodule load anaconda\nThis will update your environment to use Anaconda’s distribution of Python.\nAfter running the command, enter the command to see which pythion is being used to confirm that it is the one from Ancaconda.\n\n\n\nNote that you can use module to run other programs on your Rivanna account.\nType module list to see which programs have already been installed on your account.\nType module spider to see all the programs you can install.\n\n\n\nFrom the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the &gt;&gt;&gt; prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)\n\n\n\nNow, enter following line at the prompt and press return:\nimport this\nWhat do you see?\nTo exit the Python Shell, enter quit() or exit() and hit return.\n\n\n\nNow create a file called hello.py using the command line editor nano. Enter the same commands you used above.\nThen run it from the command line by directly invoking the Python interpreter python.",
    "crumbs": [
      "M02",
      "Activity: Hello, World!"
    ]
  },
  {
    "objectID": "activities/M02-01-Activity-Hello-World.html#which-python",
    "href": "activities/M02-01-Activity-Hello-World.html#which-python",
    "title": "Activity: Hello, World!",
    "section": "",
    "text": "Once you are in Rivanna, you will want to know which version of Python you have installed as the default.\nTo find out, from the command line type:\nwhich python\nThis will show you the “path” to a python interpreter. For example:\n\nIf you do not see “anaconda” in that path, then run the following command:\nmodule load anaconda\nThis will update your environment to use Anaconda’s distribution of Python.\nAfter running the command, enter the command to see which pythion is being used to confirm that it is the one from Ancaconda.",
    "crumbs": [
      "M02",
      "Activity: Hello, World!"
    ]
  },
  {
    "objectID": "activities/M02-01-Activity-Hello-World.html#aside",
    "href": "activities/M02-01-Activity-Hello-World.html#aside",
    "title": "Activity: Hello, World!",
    "section": "",
    "text": "Note that you can use module to run other programs on your Rivanna account.\nType module list to see which programs have already been installed on your account.\nType module spider to see all the programs you can install.",
    "crumbs": [
      "M02",
      "Activity: Hello, World!"
    ]
  },
  {
    "objectID": "activities/M02-01-Activity-Hello-World.html#the-python-interactive-shell",
    "href": "activities/M02-01-Activity-Hello-World.html#the-python-interactive-shell",
    "title": "Activity: Hello, World!",
    "section": "",
    "text": "From the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the &gt;&gt;&gt; prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)",
    "crumbs": [
      "M02",
      "Activity: Hello, World!"
    ]
  },
  {
    "objectID": "activities/M02-01-Activity-Hello-World.html#try-this",
    "href": "activities/M02-01-Activity-Hello-World.html#try-this",
    "title": "Activity: Hello, World!",
    "section": "",
    "text": "Now, enter following line at the prompt and press return:\nimport this\nWhat do you see?\nTo exit the Python Shell, enter quit() or exit() and hit return.",
    "crumbs": [
      "M02",
      "Activity: Hello, World!"
    ]
  },
  {
    "objectID": "activities/M02-01-Activity-Hello-World.html#running-python-files",
    "href": "activities/M02-01-Activity-Hello-World.html#running-python-files",
    "title": "Activity: Hello, World!",
    "section": "",
    "text": "Now create a file called hello.py using the command line editor nano. Enter the same commands you used above.\nThen run it from the command line by directly invoking the Python interpreter python.",
    "crumbs": [
      "M02",
      "Activity: Hello, World!"
    ]
  },
  {
    "objectID": "activities/M01-02-Activity-GitHub.html",
    "href": "activities/M01-02-Activity-GitHub.html",
    "title": "Activity: Using Git and GitHub",
    "section": "",
    "text": "Goal: Use Git and GitHub to put course materials on your Rivanna account.\n\n\n\nIn this activity, you will go through steps of using Git and GitHub covered in the reading on GitHub. At this point, you also should be able check off the following items:\n\nUnderstand the difference between Git and GitHub.\nUnderstand the purpose of Git and Github for data science work.\nEnsure Git is installed on your computer.\nUnderstand how to find a repository on GitHub.\n\nLet’s apply and extend this knowledge now with our course repo.\nBe sure you are inside the course directory on Rivanna we created earlier.\nWe assume you have already created a GitHub account.\nAlso, before you get started, follow these instructions to set an SSH key. You can create this on both your computer and Rivanna, but for the assignment you need only create it on Rivanna.\n\n\nFork the course GitHub hosted repository (“repo”) to your GitHub account.\nGo to https://github.com/ontoligent/DS5100-book in your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis is the course activities repo — it will be used for activities and answer keys.\n\n\nClick on the Fork icon in the upper right and follow the prompts to finish the process.\nYou should end up at the web page of your newly forked repo.\nYou will now have a copy of the repo in your GitHub account.\nClone the forked repo for this course inside of your course directory on Rivanna.\nFind the green Code button and click on it. You should see something like this:\n\nMake sure you have selected the SSH option.\n\n\n\n\n\n\nImportant\n\n\n\nNote: This requires that you have SSH set up.\n\n\nThen click on the copy icon and paste the value into the following command:\ngit clone https://github.com:&lt;github_user_name&gt;/DS5100-2024-08-O.git\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to clone the repo from your GitHub account, replacing &lt;github_user_name&gt; with your GitHub user name. Do not just cut-and-paste the line above!\n\n\nYou now have a copy the course repo to your account on Rivanna.\nThis will be the directory you created in your pre-class activities under Documents/.\nCreate a new file in your newly cloned repo.\nGo to your command line window on Rivanna.\nUse cd to move into the directory just created by the clone operation.\nMove into the directory activities/hello\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you are in this directory before proceeding.\n\n\nIf you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:\ncd ~/Documents/MSDS/DS5100/DS5100-2024-08-O/activities/hello \nNote that the tilde sign ~ stands for the path to your home directory.\nUsing the file editor on Rivanna, create and save new file called &lt;userid&gt;_hello.txt, replacing &lt;userid&gt; with your actual user ID, e.g. rca2t_hello.txt.\nIn the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?\nSave the file.\nAdd and commit the changes you made.\nNow do the following:\ngit add &lt;userid&gt;_hello.txt\ngit commit -m \"Created file for class\"\nPush your new file to the repo on GitHub.\nSince you have SSH set up, you can issue the following command without having to enter a password:\n\ngit push\n\nCreate a Pull Request\nFinally, make a pull request to have your file added to the original site. To do this, follow these steps:\nClick on the “Pull requests” menu item (see image below) on the web page for your repo.\n\n\n\nImage of pull request button on GitHub\n\n\nClick on the green “New pull request” button.\nClick on the green “Create pull request” button.\nGive the request the title “In-class activity” and then press the green “Create pull request” button at the bottom of the form.\nNow the ball is in the instructor’s court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged.\n\n\n\nDuring the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will find course materials, such as homework keys and exercises after the classes in which they are used. This should be updated each day.\nYour Assessments Repo, which is where you will be your finished work as assigned.\nThe Book Repo, which is where you will find the textbook for this course along with all of the notebooks in it. You may choose to clone or fork this, or you may download individual notebooks from the site as needed.",
    "crumbs": [
      "M01",
      "Activity: Using Git and GitHub"
    ]
  },
  {
    "objectID": "activities/M01-02-Activity-GitHub.html#steps",
    "href": "activities/M01-02-Activity-GitHub.html#steps",
    "title": "Activity: Using Git and GitHub",
    "section": "",
    "text": "Fork the course GitHub hosted repository (“repo”) to your GitHub account.\nGo to https://github.com/ontoligent/DS5100-book in your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis is the course activities repo — it will be used for activities and answer keys.\n\n\nClick on the Fork icon in the upper right and follow the prompts to finish the process.\nYou should end up at the web page of your newly forked repo.\nYou will now have a copy of the repo in your GitHub account.\nClone the forked repo for this course inside of your course directory on Rivanna.\nFind the green Code button and click on it. You should see something like this:\n\nMake sure you have selected the SSH option.\n\n\n\n\n\n\nImportant\n\n\n\nNote: This requires that you have SSH set up.\n\n\nThen click on the copy icon and paste the value into the following command:\ngit clone https://github.com:&lt;github_user_name&gt;/DS5100-2024-08-O.git\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to clone the repo from your GitHub account, replacing &lt;github_user_name&gt; with your GitHub user name. Do not just cut-and-paste the line above!\n\n\nYou now have a copy the course repo to your account on Rivanna.\nThis will be the directory you created in your pre-class activities under Documents/.\nCreate a new file in your newly cloned repo.\nGo to your command line window on Rivanna.\nUse cd to move into the directory just created by the clone operation.\nMove into the directory activities/hello\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you are in this directory before proceeding.\n\n\nIf you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:\ncd ~/Documents/MSDS/DS5100/DS5100-2024-08-O/activities/hello \nNote that the tilde sign ~ stands for the path to your home directory.\nUsing the file editor on Rivanna, create and save new file called &lt;userid&gt;_hello.txt, replacing &lt;userid&gt; with your actual user ID, e.g. rca2t_hello.txt.\nIn the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?\nSave the file.\nAdd and commit the changes you made.\nNow do the following:\ngit add &lt;userid&gt;_hello.txt\ngit commit -m \"Created file for class\"\nPush your new file to the repo on GitHub.\nSince you have SSH set up, you can issue the following command without having to enter a password:\n\ngit push\n\nCreate a Pull Request\nFinally, make a pull request to have your file added to the original site. To do this, follow these steps:\nClick on the “Pull requests” menu item (see image below) on the web page for your repo.\n\n\n\nImage of pull request button on GitHub\n\n\nClick on the green “New pull request” button.\nClick on the green “Create pull request” button.\nGive the request the title “In-class activity” and then press the green “Create pull request” button at the bottom of the form.\nNow the ball is in the instructor’s court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged.",
    "crumbs": [
      "M01",
      "Activity: Using Git and GitHub"
    ]
  },
  {
    "objectID": "activities/M01-02-Activity-GitHub.html#going-forward",
    "href": "activities/M01-02-Activity-GitHub.html#going-forward",
    "title": "Activity: Using Git and GitHub",
    "section": "",
    "text": "During the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will find course materials, such as homework keys and exercises after the classes in which they are used. This should be updated each day.\nYour Assessments Repo, which is where you will be your finished work as assigned.\nThe Book Repo, which is where you will find the textbook for this course along with all of the notebooks in it. You may choose to clone or fork this, or you may download individual notebooks from the site as needed.",
    "crumbs": [
      "M01",
      "Activity: Using Git and GitHub"
    ]
  },
  {
    "objectID": "activities/M01_ImportHello.html",
    "href": "activities/M01_ImportHello.html",
    "title": "Hello Exercise",
    "section": "",
    "text": "Students fork and clone the course repo, then create a file in a specified directory of their local repo.\nAfter that they push it to the remote and then initiate a pull request.\nThese requests are merged and then pulled locally here.\nThe results are aggregated and printed below.\n\nimport glob\nimport pandas as pd\n\n\ndata = []\nfiles = glob.glob(\"./hello/*_*.txt\")\n\n\nfiles[0]\n\n'./hello/ehe5bn_hello.txt'\n\n\n\nprint(len(files))\n\n59\n\n\n\nn_students = 67\n\n\nn_students - len(files)\n\n8\n\n\n\nfor i, file in enumerate(files):\n    sid = file.split(\"/\")[2].split(\"_\")[0]\n    line = open(file, 'r').read().strip()\n    row = (sid, line.replace('\\n', ' '))\n    data.append(row)\n\n\ndata\n\n[('ehe5bn', \"Hi, I'm Zach, I just watched Dune, it was pretty good.\"),\n ('dgr7pb',\n  'The most recent film you watched and enjoyed was the Lord of the Rings Extended Edition.'),\n ('fyx6wf', 'The last movie I watched was Hit Man.'),\n ('eqa7yg', 'Nerd'),\n ('gec2tp', 'Once Upon A Time In Hollywood'),\n ('qtf7du',\n  'Hello, my name is Vishwanath Guruvayur. The most recent movie I watched is Dumb and Dumber.'),\n ('fjp8ez',\n  'Hello my name is Javier Alonso. I have not watched a movie as of recently  but I have been watching one piece and I just finished the Whole Cake Island Arc and it was amazing.'),\n ('ggd8hvd',\n  'When I was in Panama City Beach the other week I saw \"The Fall Guy\" in movie theaters.'),\n ('wtc6vz', 'I recently watched and enjoyed a movie called The Fall Guy'),\n ('skk8kc',\n  'Hello! My name is Dan. I recently rewatched Saving Private Ryan, which is one of the best movies I have ever seen.'),\n ('yuk7du', 'Oceans 13'),\n ('mdg7wj', 'Jurassic Park'),\n ('jak5je', 'Starstruck'),\n ('mtb2tgk',\n  'The most recent film that I have watched and enjoyed was Jurassic Park.'),\n ('nuf8ms',\n  'The most recent film I watched and enjoyed was \"Everybody Wants Some\"'),\n ('svw6dn', 'Suzume'),\n ('lgs4zj', 'Dune 2'),\n ('bur6yx', 'The most recent film I watched and enjoyed was Perfect Blue'),\n ('ak2znr', 'Jurassic Park'),\n ('ag6ykz', 'The most recent film I watched is Godzilla Minus One.'),\n ('nps3cs', 'The Fall Guy'),\n ('rca2t', 'Dune'),\n ('eqp6pg', 'Inside Out 2'),\n ('aa7dd', 'Dune: part two'),\n ('ft8xx',\n  'The most recent film I enjoyed is called Paper Lives (on Netflix).'),\n ('qcp6az', 'Jurassic Park'),\n ('fmt2tg', 'Cast Away'),\n ('rs7aq',\n  'Hello my name is Rohan Shroff. The most recent film I watched and enjoyed was The Hill.'),\n ('unc6kr', 'The idea of you'),\n ('cwp5xyj', 'Good Will Hunting'),\n ('bcp8dm',\n  'My name is Doruk Ozar. The most recent movie I watched was Hit Man in Netflix.'),\n ('dcy2dq', 'I recently rewatched Yeh Jawaani Hai Deewaani and enjoyed it'),\n ('tjs5nx',\n  \"Not a big movie guy, but the most recent movie I've watched and enjoyed was the new Batman movie by DC.\"),\n ('dbm4bj',\n  'The most recent film I watched was Madame Web. I enjoyed it becuase it was terrible.'),\n ('arg8qqv', 'Diary of a Wimpy Kid'),\n ('wgp3aq', 'Most recent movie: The Lion King'),\n ('sqr8ap', \"The most recent film I've watched and enjoyed was Sinister.\"),\n ('jst7ee', 'Dune Pt. 2'),\n ('ajh5ae', 'The Meg 2'),\n ('js7jx', 'The Tangerine Bear'),\n ('ttg6nx', 'The most recent film I watched and enjoyed was The Gentlemen.'),\n ('czz7bf',\n  'Hello, my name is Chloe! The most recent movie I watched and  enjoyed was Rio 2'),\n ('mermora97', 'Nerd'),\n ('uua9gw', 'The last movie I watched was Inside Out.'),\n ('zy7ts',\n  'most rencent movie i watched and enjoyed - Civil War 2024 by A24 studio'),\n ('xmc6rp', 'Dune 2'),\n ('urn8he', 'Frozen 2'),\n ('gnq2mr', 'I recently watched and enjoyed Midsommar'),\n ('ksg8xy', 'I recently rewatched Dune!'),\n ('gry6ks', 'crazy rich asians'),\n ('gbz6qn',\n  \"Hello! My name is Isaac Levy and a movie I recently watched and enjoyed was 'Wicked Little Letters.'\"),\n ('ncc9kn',\n  'Hi! My name is Colby Le.  The most recent movie I watched and enjoyed was Lalaland.'),\n ('asm2fe', 'Road to Hashira training'),\n ('kl2jmx',\n  'The most recent film I watched and enjoyed were the Anchorman series!'),\n ('fnj7ht', 'Oppenheimer'),\n ('uqs3dq',\n  'The most recent film I watched an enjoyed was John Tucker Must Die.'),\n ('prz3dt', 'Diary of a Wimpy Kid'),\n ('cpm6gh', 'Jurassic Park'),\n ('jah9kqn', 'Jurassic Park')]\n\n\n\ndf = pd.DataFrame(data, columns=['user_id','comment'])\n\n\ndf.head()\n\n\n\n\n\n\n\n\n\nuser_id\ncomment\n\n\n\n\n0\nehe5bn\nHi, I'm Zach, I just watched Dune, it was pret...\n\n\n1\ndgr7pb\nThe most recent film you watched and enjoyed w...\n\n\n2\nfyx6wf\nThe last movie I watched was Hit Man.\n\n\n3\neqa7yg\nNerd\n\n\n4\ngec2tp\nOnce Upon A Time In Hollywood\n\n\n\n\n\n\n\n\n\nfor i, r in enumerate(df.user_id + ' | ' + df.comment):\n    print(str(i).zfill(2), \"| \" + r + \"\\n\")\n\n00 | ehe5bn | Hi, I'm Zach, I just watched Dune, it was pretty good.\n\n01 | dgr7pb | The most recent film you watched and enjoyed was the Lord of the Rings Extended Edition.\n\n02 | fyx6wf | The last movie I watched was Hit Man.\n\n03 | eqa7yg | Nerd\n\n04 | gec2tp | Once Upon A Time In Hollywood\n\n05 | qtf7du | Hello, my name is Vishwanath Guruvayur. The most recent movie I watched is Dumb and Dumber.\n\n06 | fjp8ez | Hello my name is Javier Alonso. I have not watched a movie as of recently  but I have been watching one piece and I just finished the Whole Cake Island Arc and it was amazing.\n\n07 | ggd8hvd | When I was in Panama City Beach the other week I saw \"The Fall Guy\" in movie theaters.\n\n08 | wtc6vz | I recently watched and enjoyed a movie called The Fall Guy\n\n09 | skk8kc | Hello! My name is Dan. I recently rewatched Saving Private Ryan, which is one of the best movies I have ever seen.\n\n10 | yuk7du | Oceans 13\n\n11 | mdg7wj | Jurassic Park\n\n12 | jak5je | Starstruck\n\n13 | mtb2tgk | The most recent film that I have watched and enjoyed was Jurassic Park.\n\n14 | nuf8ms | The most recent film I watched and enjoyed was \"Everybody Wants Some\"\n\n15 | svw6dn | Suzume\n\n16 | lgs4zj | Dune 2\n\n17 | bur6yx | The most recent film I watched and enjoyed was Perfect Blue\n\n18 | ak2znr | Jurassic Park\n\n19 | ag6ykz | The most recent film I watched is Godzilla Minus One.\n\n20 | nps3cs | The Fall Guy\n\n21 | rca2t | Dune\n\n22 | eqp6pg | Inside Out 2\n\n23 | aa7dd | Dune: part two\n\n24 | ft8xx | The most recent film I enjoyed is called Paper Lives (on Netflix).\n\n25 | qcp6az | Jurassic Park\n\n26 | fmt2tg | Cast Away\n\n27 | rs7aq | Hello my name is Rohan Shroff. The most recent film I watched and enjoyed was The Hill.\n\n28 | unc6kr | The idea of you\n\n29 | cwp5xyj | Good Will Hunting\n\n30 | bcp8dm | My name is Doruk Ozar. The most recent movie I watched was Hit Man in Netflix.\n\n31 | dcy2dq | I recently rewatched Yeh Jawaani Hai Deewaani and enjoyed it\n\n32 | tjs5nx | Not a big movie guy, but the most recent movie I've watched and enjoyed was the new Batman movie by DC.\n\n33 | dbm4bj | The most recent film I watched was Madame Web. I enjoyed it becuase it was terrible.\n\n34 | arg8qqv | Diary of a Wimpy Kid\n\n35 | wgp3aq | Most recent movie: The Lion King\n\n36 | sqr8ap | The most recent film I've watched and enjoyed was Sinister.\n\n37 | jst7ee | Dune Pt. 2\n\n38 | ajh5ae | The Meg 2\n\n39 | js7jx | The Tangerine Bear\n\n40 | ttg6nx | The most recent film I watched and enjoyed was The Gentlemen.\n\n41 | czz7bf | Hello, my name is Chloe! The most recent movie I watched and  enjoyed was Rio 2\n\n42 | mermora97 | Nerd\n\n43 | uua9gw | The last movie I watched was Inside Out.\n\n44 | zy7ts | most rencent movie i watched and enjoyed - Civil War 2024 by A24 studio\n\n45 | xmc6rp | Dune 2\n\n46 | urn8he | Frozen 2\n\n47 | gnq2mr | I recently watched and enjoyed Midsommar\n\n48 | ksg8xy | I recently rewatched Dune!\n\n49 | gry6ks | crazy rich asians\n\n50 | gbz6qn | Hello! My name is Isaac Levy and a movie I recently watched and enjoyed was 'Wicked Little Letters.'\n\n51 | ncc9kn | Hi! My name is Colby Le.  The most recent movie I watched and enjoyed was Lalaland.\n\n52 | asm2fe | Road to Hashira training\n\n53 | kl2jmx | The most recent film I watched and enjoyed were the Anchorman series!\n\n54 | fnj7ht | Oppenheimer\n\n55 | uqs3dq | The most recent film I watched an enjoyed was John Tucker Must Die.\n\n56 | prz3dt | Diary of a Wimpy Kid\n\n57 | cpm6gh | Jurassic Park\n\n58 | jah9kqn | Jurassic Park"
  },
  {
    "objectID": "activities/M03_exercises.html",
    "href": "activities/M03_exercises.html",
    "title": "M03 Exercises",
    "section": "",
    "text": "val = 5\n\nif -10 &lt; val &lt; - 5:\n    print('bucket 1')\nelif -5 &lt;= val &lt;= -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nIf val = 5, nothing will print.\nTo fix the problem, add another elif condition if needed, or an else:\n\nval = 5\n\nif -10 &lt; val &lt; - 5:\n    print('bucket 1')\nelif -5 &lt;= val &lt;= -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.1",
    "href": "activities/M03_exercises.html#exercise-3.1",
    "title": "M03 Exercises",
    "section": "",
    "text": "val = 5\n\nif -10 &lt; val &lt; - 5:\n    print('bucket 1')\nelif -5 &lt;= val &lt;= -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nIf val = 5, nothing will print.\nTo fix the problem, add another elif condition if needed, or an else:\n\nval = 5\n\nif -10 &lt; val &lt; - 5:\n    print('bucket 1')\nelif -5 &lt;= val &lt;= -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.2",
    "href": "activities/M03_exercises.html#exercise-3.2",
    "title": "M03 Exercises",
    "section": "Exercise 3.2",
    "text": "Exercise 3.2\n\nxx = [-2,8,0,5,6]\n\nmax_val = max(xx)\n\nfor x in xx:\n    print(x) if x &lt; max_val else print('max_val')\n\n-2\nmax_val\n0\n5\n6"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.3",
    "href": "activities/M03_exercises.html#exercise-3.3",
    "title": "M03 Exercises",
    "section": "Exercise 3.3",
    "text": "Exercise 3.3\n\nit = 0\n\nmax_iter = 100\n\nwhile it &lt; max_iter:\n    if (it == 0) or (it % 10 == 0):\n        print(it)\n    it += 1\n\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.4",
    "href": "activities/M03_exercises.html#exercise-3.4",
    "title": "M03 Exercises",
    "section": "Exercise 3.4",
    "text": "Exercise 3.4\n\nmy_list = ['United States','John','Boston','Washington']\n\nfor i in my_list:\n    print(i.lower())\n\nunited states\njohn\nboston\nwashington"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.5",
    "href": "activities/M03_exercises.html#exercise-3.5",
    "title": "M03 Exercises",
    "section": "Exercise 3.5",
    "text": "Exercise 3.5\n\nmy_iter = iter(my_list)\nprint(next(my_iter))\nprint(next(my_iter))\nprint(next(my_iter))\nprint(next(my_iter))\n\nmy_iter = iter(my_list)\n_ = [print(next(my_iter)) for i in range(len(my_list))]\n\nUnited States\nJohn\nBoston\nWashington\nUnited States\nJohn\nBoston\nWashington"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.6",
    "href": "activities/M03_exercises.html#exercise-3.6",
    "title": "M03 Exercises",
    "section": "Exercise 3.6",
    "text": "Exercise 3.6\n\nmy_dict = {\n    'Medford':11763,\n    'Charlottesville':22903\n}\n\nfor city, zip in my_dict.items():\n    print(city, zip)\n\nMedford 11763\nCharlottesville 22903"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.7",
    "href": "activities/M03_exercises.html#exercise-3.7",
    "title": "M03 Exercises",
    "section": "Exercise 3.7",
    "text": "Exercise 3.7\n\nfor key in my_dict.keys():\n    print(key, my_dict[key])\n\nMedford 11763\nCharlottesville 22903"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.8",
    "href": "activities/M03_exercises.html#exercise-3.8",
    "title": "M03 Exercises",
    "section": "Exercise 3.8",
    "text": "Exercise 3.8\n\nnumeric_list = [2,4,8]\n\nprint([i**3 for i in numeric_list])\n\n[8, 64, 512]"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.9",
    "href": "activities/M03_exercises.html#exercise-3.9",
    "title": "M03 Exercises",
    "section": "Exercise 3.9",
    "text": "Exercise 3.9\n\nstr_list = ['lol','52','4','john','uva','sds']\n\nprint([i for i in str_list if i.isdigit()])\n\n['52', '4']"
  },
  {
    "objectID": "activities/M03_exercises.html#exercise-3.10",
    "href": "activities/M03_exercises.html#exercise-3.10",
    "title": "M03 Exercises",
    "section": "Exercise 3.10",
    "text": "Exercise 3.10\n\ngrid = {\n    'max_depth':[5,10],\n    'ntrees':[100,200,300],\n    'regularization':[11,12],\n    'max_iter':[10,20]\n}\n\nprint({key:grid[key] for key in grid.keys() if 'max' in key})\n\n{'max_depth': [5, 10], 'max_iter': [10, 20]}"
  },
  {
    "objectID": "activities/M02_exercises.html",
    "href": "activities/M02_exercises.html",
    "title": "Exercise 2.1",
    "section": "",
    "text": "my_string  = 'MSDS-DS5100'\nlen(my_string)\n\n11\nprint(my_string[0:3])\n\nMSD\nprint(my_string[-3:])\n\n100"
  },
  {
    "objectID": "activities/M02_exercises.html#exercise-2.2",
    "href": "activities/M02_exercises.html#exercise-2.2",
    "title": "Exercise 2.1",
    "section": "Exercise 2.2",
    "text": "Exercise 2.2\n\nmy_list = [1,2,3]\nprint(len(my_list))\n\n3\n\n\n\nprint(my_list[1])\n\n2"
  },
  {
    "objectID": "activities/M02_exercises.html#exercise-2.3",
    "href": "activities/M02_exercises.html#exercise-2.3",
    "title": "Exercise 2.1",
    "section": "Exercise 2.3",
    "text": "Exercise 2.3\n\nmy_tuple = 1,2,3\nprint(len(my_tuple))\n\n3\n\n\n\nmy_tuple.append(4) # can't append a tuple\n\nAttributeError: 'tuple' object has no attribute 'append'"
  },
  {
    "objectID": "activities/M02_exercises.html#exercise-2.4",
    "href": "activities/M02_exercises.html#exercise-2.4",
    "title": "Exercise 2.1",
    "section": "Exercise 2.4",
    "text": "Exercise 2.4\n\nscalar_var = 'string'\n\n\nset = {'a','b','c'}\n\n\nprint(scalar_var in set)\n\nFalse"
  },
  {
    "objectID": "activities/FP02-Classes.html",
    "href": "activities/FP02-Classes.html",
    "title": "FP 02 Classes",
    "section": "",
    "text": "In this activity, you will create a set of empty classes in the final project repo you created last week.\nEmpty classes and function are sometimes called “stubs” by software developers.\nThe internal code for these classes will be added later as part of your final project.\nTo complete the activity, do the following:\n\nIn your repo directory, create a subdirectory called montecarlo.\nInside of that directory, create a Python file called montecarlo.py.\nOpen the file in a text editor and create stubs for three classes with the following names: Die, Game, and Analyzer.\nWithin each class, define a function (i.e. a method) called __init__().\nFor the body of these methods just enter the statement pass.\n\n\n\n\nIf there is time, you may get started on writing the classes themselves.\nHere are the instructions from the Final Project assignment that will be revealed in the next class."
  },
  {
    "objectID": "activities/FP02-Classes.html#minimal-requirements",
    "href": "activities/FP02-Classes.html#minimal-requirements",
    "title": "FP 02 Classes",
    "section": "",
    "text": "In this activity, you will create a set of empty classes in the final project repo you created last week.\nEmpty classes and function are sometimes called “stubs” by software developers.\nThe internal code for these classes will be added later as part of your final project.\nTo complete the activity, do the following:\n\nIn your repo directory, create a subdirectory called montecarlo.\nInside of that directory, create a Python file called montecarlo.py.\nOpen the file in a text editor and create stubs for three classes with the following names: Die, Game, and Analyzer.\nWithin each class, define a function (i.e. a method) called __init__().\nFor the body of these methods just enter the statement pass."
  },
  {
    "objectID": "activities/FP02-Classes.html#advanced",
    "href": "activities/FP02-Classes.html#advanced",
    "title": "FP 02 Classes",
    "section": "",
    "text": "If there is time, you may get started on writing the classes themselves.\nHere are the instructions from the Final Project assignment that will be revealed in the next class."
  },
  {
    "objectID": "activities/FP02-Classes.html#the-die-class",
    "href": "activities/FP02-Classes.html#the-die-class",
    "title": "FP 02 Classes",
    "section": "The Die class",
    "text": "The Die class\n\nGeneral Definition\n\nA die has \\(N\\) sides, or “faces”, and \\(W\\) weights, and can be rolled to select a face.\nFor example, a “die” with \\(N = 2\\) is a coin, and a one with \\(N = 6\\) is a standard die.\nNormally, dice and coins are “fair,” meaning that the each side has an equal weight. An unfair die is one where the weights are unequal.\nEach side contains a unique symbol. Symbols may be all alphabetic or all numeric.\n\\(W\\) defaults to \\(1.0\\) for each face but can be changed after the object is created.\nThe weights are just positive numbers (integers or floats, including \\(0\\)), not a normalized probability distribution.\nThe die has one behavior, which is to be rolled one or more times.\n\n\n\nSpecific Methods and Attributes\nAn initializer.\n\nTakes a NumPy array of faces as an argument. Throws a TypeError if not a NumPy array.\nThe array’s data type dtype may be strings or numbers.\nThe array’s values must be distinct. Tests to see if the values are distinct and raises a ValueError if not.\nInternally initializes the weights to \\(1.0\\) for each face.\nSaves both faces and weights in a private data frame with faces in the index.\n\nA method to change the weight of a single side.\n\nTakes two arguments: the face value to be changed and the new weight.\nChecks to see if the face passed is valid value, i.e. if it is in the die array. If not, raises an IndexError.\nChecks to see if the weight is a valid type, i.e. if it is numeric (integer or float) or castable as numeric. If not, raises a TypeError.\n\nA method to roll the die one or more times.\n\nTakes a parameter of how many times the die is to be rolled; defaults to \\(1\\).\nThis is essentially a random sample with replacement, from the private die data frame, that applies the weights.\nReturns a Python list of outcomes.\nDoes not store internally these results.\n\nA method to show the die’s current state.\n\nReturns a copy of the private die data frame."
  },
  {
    "objectID": "activities/FP02-Classes.html#the-game-class",
    "href": "activities/FP02-Classes.html#the-game-class",
    "title": "FP 02 Classes",
    "section": "The Game class",
    "text": "The Game class\n\nGeneral Definition\n\nA game consists of rolling of one or more similar dice (Die objects) one or more times.\nBy similar dice, we mean that each die in a given game has the same number of sides and associated faces, but each die object may have its own weights.\nEach game is initialized with a Python list that contains one or more dice.\nGame objects have a behavior to play a game, i.e. to roll all of the dice a given number of times.\nGame objects only keep the results of their most recent play.\n\n\n\nSpecific Methods and Attributes\nAn initializer.\n\nTakes a single parameter, a list of already instantiated similar dice.\nIdeally this would check if the list actually contains Die objects and that they all have the same faces, but this is not required for this project.\n\nA play method.\n\nTakes an integer parameter to specify how many times the dice should be rolled.\nSaves the result of the play to a private data frame.\nThe data frame should be in wide format, i.e. have the roll number as a named index, columns for each die number (using its list index as the column name), and the face rolled in that instance in each cell.\n\nA method to show the user the results of the most recent play.\n\nThis method just returns a copy of the private play data frame to the user.\n\f Takes a parameter to return the data frame in narrow or wide form which defaults to wide form.\nThe narrow form will have a MultiIndex, comprising the roll number and the die number (in that order), and a single column with the outcomes (i.e. the face rolled).\nThis method should raise a ValueError if the user passes an invalid option for narrow or wide."
  },
  {
    "objectID": "activities/FP02-Classes.html#the-analyzer-class",
    "href": "activities/FP02-Classes.html#the-analyzer-class",
    "title": "FP 02 Classes",
    "section": "The Analyzer class",
    "text": "The Analyzer class\n\nGeneral Definition\nAn Analyzer object takes the results of a single game and computes various descriptive statistical properties about it.\n\n\nSpecific Methods and Attributes\nAn initializer.\n\nTakes a game object as its input parameter. Throw a ValueError if the passed value is not a Game object.\n\nA jackpot method.\n\nA jackpot is a result in which all faces are the same, e.g. all ones for a six-sided die.\nComputes how many times the game resulted in a jackpot.\nReturns an integer for the number of jackpots.\n\nA face counts per roll method.\n\nComputes how many times a given face is rolled in each event. For example, if a roll of five dice has all sixes, then the counts for this roll would be \\(5\\) for the face value 6 and \\(0\\) for the other faces.\nReturns a data frame of results.\nThe data frame has an index of the roll number, face values as columns, and count values in the cells (i.e. it is in wide format).\n\nA combo count method.\n\nComputes the distinct combinations of faces rolled, along with their counts.\nCombinations are order-independent and may contain repetitions.\nReturns a data frame of results.\nThe data frame should have an MultiIndex of distinct combinations and a column for the associated counts.\n\nAn permutation count method.\n\nComputes the distinct permutations of faces rolled, along with their counts.\nPermutations are order-dependent and may contain repetitions.\nReturns a data frame of results.\nThe data frame should have an MultiIndex of distinct permutations and a column for the associated counts."
  },
  {
    "objectID": "activities/FP02-Classes.html#general-requirements-for-classes",
    "href": "activities/FP02-Classes.html#general-requirements-for-classes",
    "title": "FP 02 Classes",
    "section": "General Requirements for Classes",
    "text": "General Requirements for Classes\n\nAll classes and methods must have appropriate docstrings.\nClass docstrings should describe the general purpose of the class.\nMethod docstrings should describe the purpose of the method, any input arguments, any return values if applicable, and any changes to the object’s state that the user should know about.\nInput argument descriptions should describe data types and formats as well as any default values.\nYou may use language included in this document to create these docstrings."
  },
  {
    "objectID": "activities/M01-01-Using-Rivanna.html",
    "href": "activities/M01-01-Using-Rivanna.html",
    "title": "Activity: Using Rivanna",
    "section": "",
    "text": "Activity: Using Rivanna\n\n\n\n\n\n\nGoal: Create your course directory structure on Rivanna.\n\n\n\nAfter reading the previous documents on Rivanna and Unix, try this activity to get acquainted with the Rivanna high-performance computing cluster at UVA.\nTo get started, go to OpenOnDemand Dashboard page and from the main menu select Clusters → Rivanna Shell Access.\nThis should open a terminal to what is called the “shell” of the operating system.\n\n\n\nScreenshot of Rivanna shell\n\n\nRivanna uses Linux, a member of the Unix family of operating systems. Many cloud resources use Linux.\nUnderstanding how to do work from the command line on such systems is an essential skill of the data scientist.\nIf you have never used the command line, have no fear! Just enter the commands exactly as shown and ask questions in the Teams chat if you are stuck.\nNow, create a directory for your course and this course by entering the following commands:\ncd Documents \nmdkir MSDS \ncd MSDS \nmkdir DS5100 \ncd DS5100\nIf the Documents directory does not exist, create that first using the mkdir command.\n\ncd means “change directory,” and is a basic Unix command.\nmkdir means “make directory.” It’s also a basic Unix command.\n\nNote that you can use the tab key to complete path and command names as you type.\nYou don’t have to, but it would be a good idea to create subdirectories for any of your courses that use Rivanna.\nMore information about Unix shell commands can be found the document Unix Shell Commands.",
    "crumbs": [
      "M01",
      "Activity: Using Rivanna"
    ]
  },
  {
    "objectID": "activities/M01_SurveyResponses.html",
    "href": "activities/M01_SurveyResponses.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "import pandas as pd\n\nReplace file name value for src_file with downloaded CSV from online form.\n\nsrc_file = \"survey.csv\" \ndf = pd.read_csv(src_file).dropna(axis=1)\n\n\nN = len(df)\n\n\nN\n\n25\n\n\n\ndf.value_counts('Python')\n\nPython\nBeginner         16\nInter-mediate     8\nAdvanced          1\nName: count, dtype: int64\n\n\n\ndf.columns = \"id start end email name degree paid python r matlab java sql os enjoy javascript\".split()\n\n\n# df\n\n\nG = df.groupby('python')\n\n\nA = G.get_group(\"Advanced\")\n\n\nI = G.get_group(\"Inter-mediate\")\n\n\nB = G.get_group(\"Beginner\")\n\n\ncols = [3,4,5,6]\n\n\nA\n\n\n\n\n\n\n\n\n\nid\nstart\nend\nemail\nname\ndegree\npaid\npython\nr\nmatlab\njava\nsql\nos\nenjoy\njavascript\n\n\n\n\n2\n3\n1/17/24 18:43:15\n1/17/24 18:45:10\nuts4gf@virginia.edu\nOlivia Kantor\nHumanities;\nYes\nAdvanced\nBeginner\nBeginner\nBeginner\nInter-mediate\nMacOS\nYes\nBeginner\n\n\n\n\n\n\n\n\n\nA.iloc[:, cols]\n\n\n\n\n\n\n\n\n\nemail\nname\ndegree\npaid\n\n\n\n\n2\nuts4gf@virginia.edu\nOlivia Kantor\nHumanities;\nYes\n\n\n\n\n\n\n\n\n\nI.iloc[:, cols]\n\n\n\n\n\n\n\n\n\nemail\nname\ndegree\npaid\n\n\n\n\n0\nia5qk@virginia.edu\nIsha Anand\nHumanities;\nNo\n\n\n6\nkvu2et@virginia.edu\nTrenton Ribbens\nEngineering;\nNo\n\n\n8\ndb5kb@virginia.edu\nDavid Baisas\nUnlisted STEM;\nYes\n\n\n10\ndss2q@virginia.edu\nDaniel Stornetta\nHumanities;\nNo\n\n\n13\ndfe2zj@virginia.edu\nVenkat Viswanathan\nEngineering;\nYes\n\n\n15\nycv3fh@virginia.edu\nClarissa Benitez\nMath;\nNo\n\n\n20\ntar3kh@virginia.edu\nTimothy Rodriguez\nSocial Science;\nYes\n\n\n23\nqfw3cr@virginia.edu\nVictor Ontiveros\nComputer Science;\nYes\n\n\n\n\n\n\n\n\n\nB.iloc[:, cols]\n\n\n\n\n\n\n\n\n\nemail\nname\ndegree\npaid\n\n\n\n\n1\nuwa6xv@virginia.edu\nAlanna Hazlett\nNatural Science;\nNo\n\n\n3\nnzt3px@virginia.edu\nThanh Doan\nStatistics;Social Science;\nNo\n\n\n4\nfxj5fe@virginia.edu\nDavid Hernandez\nSocial Science;\nNo\n\n\n5\nzsf9pd@virginia.edu\nVicky Singh\nEngineering;\nYes\n\n\n7\nbdg5g@virginia.edu\nBrady Genz\nComputer Science;Math;Engineering;\nNo\n\n\n9\nrcs2mh@virginia.edu\nEtienne Jimenez\nMath;\nNo\n\n\n11\nnge4py@virginia.edu\nChristian Ollen\nUnlisted STEM;\nNo\n\n\n12\nctx8bn@virginia.edu\nIsabella Paolucci\nNatural Science;\nNo\n\n\n14\nvun4kt@virginia.edu\nElisa de la Vega Ricardo\nUnlisted STEM;\nYes\n\n\n16\ncbv6gd@virginia.edu\nDevlin Bridges\nMath;\nYes\n\n\n17\nsck4jh@virginia.edu\nSam Knisely\nStatistics;Unlisted Non-STEM;\nYes\n\n\n18\ncdw7dr@virginia.edu\nChristopher Wikoff\nSocial Science;\nNo\n\n\n19\netk3pu@virginia.edu\nAlec Pixton\nUnlisted STEM;\nNo\n\n\n21\nfyb7sx@virginia.edu\nEmmanuel Leonce\nEngineering;\nNo\n\n\n22\nki5rb@virginia.edu\nKarunya Iyappan\nHumanities;Social Science;\nNo\n\n\n24\nesa5ch@virginia.edu\nEric Arnold\nEngineering;Humanities;\nNo\n\n\n\n\n\n\n\n\n\nB.value_counts('degree').plot.pie();\n\n\n\n\n\n\n\n\n\nI.value_counts('degree').plot.pie();"
  },
  {
    "objectID": "activities/hello-world.html",
    "href": "activities/hello-world.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "print('Hello World')\n\nHello World"
  },
  {
    "objectID": "activities/M11-Notes.html",
    "href": "activities/M11-Notes.html",
    "title": "M11 Notes",
    "section": "",
    "text": "Installing an R Kernel\nYou can run R in Jupyter by installing an R kernel.\nHere’s a how to document to set this up.\nIn brief, here’s what you do. First, at the command line:\nconda create -n r_env r-essentials r-base\nconda activate r_env\nR # This opens the R shell\nThen, in the R shell:\nIRkernel::installspec(name = 'r_env', displayname = 'R Environment')\nquit()\nNow, fire up a Jupyter Lab instance from the OpenOnDemand page and select the kernel when you create a new notebook.\n\n\nDplyr\n\nA grammar of data transformation.\nTreats functions as verbs in a vocabulary.\nSimilar to SQL — SELECT, WHERE, ORDER BY, GROUP BY, etc.\n\nHowever, arrange() and mutate() are implicit in SQL as part of the SELECT clause.\n\nMakes use of the magrittr pipes %&gt;% to connect operations.\nIntroduces a new data structure – the tibble.\nPart of the Tidyverse, a replacement of basic R.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nFloating Point Comparisons\nAs with Python, there is a problem with floating point numbers you may encounter when using ==.\n\nsqrt(2) ^ 2 == 2\n1 / 49 * 49 == 1\n\nFALSE\n\n\nFALSE\n\n\nRecall that computers use finite precision arithmetic, since they can’t store an infinite number of digits.\nThis means that that every float you see is an approximation.\nSo, instead of relying on ==, use near():\n\nnear(sqrt(2) ^ 2,  2)\nnear(1 / 49 * 49, 1)\n\nTRUE\n\n\nTRUE\n\n\n\n\nSplit-Apply-Combine\nSplit-Apply-Combine is a general pattern of data transformation.\n\nSPLIT: Split up table by observations into groups (smaller dataframes) based on a filter.\nAPPLY: Apply a summary, aka aggregate function to each of the groups, which results in reducing these dataframes to single rows.\nCOMBINE: Compine the collapsed group tables into a single table.\n\nExamle where a dataframe is split by the values \\([A,B,C]\\) in Col 1:\n\n\n\nimage.png\n\n\nThe resulting table with have as its implicit index the unique list of values in the grouping column.\nSimple Example\n\nhead(mtcars)\n\n\n\nA data.frame: 6 × 11\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\n\nagg_by_cyl &lt;- mtcars %&gt;% \n    group_by(cyl) %&gt;% # Split\n    summarise(avg_mpg = mean(mpg), avg_hp = mean(hp)) # Apply and Combine\n\n\nagg_by_cyl\n\n\n\nA tibble: 3 × 3\n\n\ncyl\navg_mpg\navg_hp\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n4\n26.66364\n82.63636\n\n\n6\n19.74286\n122.28571\n\n\n8\n15.10000\n209.21429\n\n\n\n\n\n\n\nagg_by_cyl &lt;- agg_by_cyl %&gt;% \n    mutate(hp_per_cyl = avg_hp / cyl)\n\n\nagg_by_cyl\n\n\n\nA tibble: 3 × 4\n\n\ncyl\navg_mpg\navg_hp\nhp_per_cyl\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n4\n26.66364\n82.63636\n20.65909\n\n\n6\n19.74286\n122.28571\n20.38095\n\n\n8\n15.10000\n209.21429\n26.15179\n\n\n\n\n\n\n\nagg_by_cyl %&gt;%\n    select(cyl, avg_mpg) %&gt;% \n    plot(type='l')\n\n\n\n\n\n\n\n\nSee this article by Brian S. Yandell, a professor of statistics at Wisconsin, for a deeper dive into this topic.\n\n\nHelpers\nDplyr makes heavy use of helper functions.\nna.rm = TRUE # A simple way of removing missing values from data if they are coded as NA.\nn = n() #  Counts the number of observations in a group.\nThese often appear inside the arguments of data-masking verbs like mutate(), filter(), and group_by().\nFor example,\ndf %&gt;% \n    group_by(group_variable) %&gt;% \n    summarise(count = n())\nThis counts observations by group.\n\n\nJoins\nSee Chapter 13, “Joins” in R for Data Science (2e)\nIt always helps to know SQL, since these libraries essentially implement the relational model."
  },
  {
    "objectID": "activities/M02-02-Activity-JupyterLab-on-Rivanna.html",
    "href": "activities/M02-02-Activity-JupyterLab-on-Rivanna.html",
    "title": "Activity: Jupyter Lab",
    "section": "",
    "text": "Activity: Jupyter Lab\nNow that we have run Python on Rivanna from the command line, let’s try it using a Jupyter Notebook.\nGo the OnDemand site to access Rivanna. As a reminder, the URL is https://rivanna-portal.hpc.virginia.edu/.\nFrom the Interactive Apps menu, select JupyterLab and fill out the form to initiate a new session. Your form should have the following values:\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that you may increase the number of hours, cores, and megabytes of RAM, but asking for too much will increase the time it takes to start your session. So select just the resources needed and enter our course allocation msds_ds5100 if this value is different than in the image above).\n\n\nOnce the session is ready, launch the notebook.\nOnce you are in the notebook, use file system tab on the left to get to the directory of your personal assessments repo. Remember, you created two repos for this class — one for course content from the instructor, and one for your own course work. Use the latter for this exercise.\nIn a code cell in the notebook, enter the code to print \"Hello, World!\", and run the cell.\nSave your notebook as hello-world.ipynb.",
    "crumbs": [
      "M02",
      "Activity: Jupyter Lab"
    ]
  },
  {
    "objectID": "exercises/M02_exercises.html",
    "href": "exercises/M02_exercises.html",
    "title": "Exercise 2.1",
    "section": "",
    "text": "my_string  = 'MSDS-DS5100'\nlen(my_string)\n\n11\nprint(my_string[0:3])\n\nMSD\nprint(my_string[-3:])\n\n100"
  },
  {
    "objectID": "exercises/M02_exercises.html#exercise-2.2",
    "href": "exercises/M02_exercises.html#exercise-2.2",
    "title": "Exercise 2.1",
    "section": "Exercise 2.2",
    "text": "Exercise 2.2\n\nmy_list = [1,2,3]\nprint(len(my_list))\n\n3\n\n\n\nprint(my_list[1])\n\n2"
  },
  {
    "objectID": "exercises/M02_exercises.html#exercise-2.3",
    "href": "exercises/M02_exercises.html#exercise-2.3",
    "title": "Exercise 2.1",
    "section": "Exercise 2.3",
    "text": "Exercise 2.3\n\nmy_tuple = 1,2,3\nprint(len(my_tuple))\n\n3\n\n\n\nmy_tuple.append(4) # can't append a tuple\n\nAttributeError: 'tuple' object has no attribute 'append'"
  },
  {
    "objectID": "exercises/M02_exercises.html#exercise-2.4",
    "href": "exercises/M02_exercises.html#exercise-2.4",
    "title": "Exercise 2.1",
    "section": "Exercise 2.4",
    "text": "Exercise 2.4\n\nscalar_var = 'string'\n\n\nset = {'a','b','c'}\n\n\nprint(scalar_var in set)\n\nFalse"
  },
  {
    "objectID": "exercises/M09-Exercise.html",
    "href": "exercises/M09-Exercise.html",
    "title": "M09 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential\n\nChallenge\nCreate and publish on GitHub a package containing a single module with a single function.\n\n\nSynopsis\n\nCreate a new git repo for your package.\nCreate and edit the required files and directories for your package.\nWrite a module file in the repo that contains at least one function and save it in the correct directory.\nStage, commit, and push all the files you’ve created.\nInstall your package with pip.\nOutside of your package dir, write a script to test your method.\nHave someone else clone your repo, install your package and test it.\n\n\n\nCreate Repo\nCreate a single new repo for your package on GitHib.\nBe sure to choose a license, include a readme, and a select a .gitignore file for Python.\nClone the repo locally – outside of your course repo.\nThe root of the repo will be the project directory.\n\n\nCreate Package Directory and Files\nCreate your package directory and file structure for your package.\nInclude empty versions of all essential files, including your module file.\nThe initial directory structure for your package should look like this:\nyour_package/\n    your_module.py\n    __init__.py\nsetup.py\nMy example looks like this (I named the package demo):\ndemo/\n    jabber.py\n    __init__.py\nsetup.py\n\n\nCreate the Module\nYour module just needs to have one function.\nIt’s a good idea to make it print something.\nIt should also have a docstring.\nName the file something that reflects the purpose of the function, and any other code that the file will contain.\nSave it.\nin the file jabber.py:\ndef tell_me_something():\n    \"\"\"Wise cracking function.\"\"\"\n    print(\"Something.\")\n\n\nEdit __init__.py\nPut a print statement welcoming the user to your module.\nWe don’t normally do this, we’re just demonstrating what it does.\nInside of __init__.py:\nprint(\"Welcome to my module!\")\n\n\nCreate a setup file\nCreate the setup.py file in the root of the project directory.\nImport what needs to be imported. Hint: you need setuptools.\nAdd basic metadata and configuration info about your package.\nInside of setup.py I put:\nfrom setuptools import setup\n\nsetup(\n    name='Demo',\n    version='0.1',\n    description='A simple demonstration package',\n    url='http://github.com/ontoligent/m09-demo',\n    author='R.C. Alvarado',\n    author_email='ontoligent@gmail.com',\n    license='MIT',\n    packages=['demo']\n)\n\n\nInstall your package\nRun a command from bash to install the script to Python on your system.\npip install .\nWe normally run this during development:\npip install -e .\nHere are the results:\nrca2t@rivanna$ pip install -e .\nDefaulting to user installation because normal site-packages is not writeable\nObtaining file:///sfs/qumulo/qhome/rca2t/Documents/MSDS/DS5100/m14-demo\nInstalling collected packages: Demo\n  Running setup.py develop for Demo\nSuccessfully installed Demo\nWe might also have done this:\npip install --user -e .\n\n\nTest it out\nRun the file somewhere on your system outside of the repo.\nYou can use a python file, a notebook, or the command-line.\nHere is a sample script:\n#! /usr/env python3\n\nfrom demo.jabber import tell_me_something as tms\n\ntms()\nAnd here is the output:\nrca2t@rivanna$ python ./m14-demo-test.py\nWelcome to Jabber!\nSomething.\n\n\nReally Test It\nPush your changes to GitHub.\nClone the repo on another computer.\nInstall your package.\nTest it out."
  },
  {
    "objectID": "exercises/M02-Notes.html",
    "href": "exercises/M02-Notes.html",
    "title": "M02 Notes",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n%%html\n&lt;style&gt;\ntable {float: left; clear: right;}\ntd, th {text-align:right;}\n&lt;/style&gt;"
  },
  {
    "objectID": "exercises/M02-Notes.html#data-code",
    "href": "exercises/M02-Notes.html#data-code",
    "title": "M02 Notes",
    "section": "Data / Code",
    "text": "Data / Code\nData vs algorithm (code). How are they related?"
  },
  {
    "objectID": "exercises/M02-Notes.html#data-types-and-structures",
    "href": "exercises/M02-Notes.html#data-types-and-structures",
    "title": "M02 Notes",
    "section": "Data types and structures",
    "text": "Data types and structures\nData types and data structures. What are the differences?\nData types are atomic; they don’t contain other data types.\nA data structure contains data types organized in a certain way."
  },
  {
    "objectID": "exercises/M02-Notes.html#strings",
    "href": "exercises/M02-Notes.html#strings",
    "title": "M02 Notes",
    "section": "Strings",
    "text": "Strings\nStrings are data types, but internally they are like data structures.\nHowever, unlike the data structures considered here, strings can’t contain any of the data types specified by Python.\nInternally, a string is a sequence of Unicode code points, which are not exposed as data types (as they are in some other languages).\n\nA code point is a numerical value that maps to a specific character.\nUnicode is an international standard of code points that map onto the alphabets of many languages.\n\nEach character is an element in an immutable list-like structure.\nYou can access it’s elements as if it were a tuple of characters:\n\nmy_string = \"This is a string\"\nprint(my_string[0])\nprint(my_string[-1])\nprint(my_string[1:-1])\nprint(my_string[1:4])\nprint(my_string[1:-4])\nprint(my_string[-4:1])\n\nT\ng\nhis is a strin\nhis\nhis is a st\n\n\n\nBut also like a tuple, you can’t change its values:\n\nmy_string[2] = 'a'\nmy_string[3] = 't'\n\nNameError: name 'my_string' is not defined\n\n\nNote that some languages, like Java, have a data type for individual characters, e.g. A."
  },
  {
    "objectID": "exercises/M02-Notes.html#string-indexing",
    "href": "exercises/M02-Notes.html#string-indexing",
    "title": "M02 Notes",
    "section": "String indexing",
    "text": "String indexing\nNote that strings can be accessed via indexes, since they are list-like sequences.\nEvery positive number has a corresponding negative number, and these may be\nsubstituted freely and using indexes and slices.\nSlices have to be expressed using numbers going from left to right.\nThe following example illustrates these points.\n\nmy_string2 = \"I AM A STRING\"\n\nThe above string can represented in the following way:\n\n\n\nI\n\nA\nM\n\nA\n\nS\nT\nR\nI\nN\nG\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n-13\n-12\n-11\n-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\nNote that the second and third rows of this table represent two functionally\nequivalent ways of accessing elements of the string sequence.\nAlso note that positive and negative numbers are subsitutible.\n\nprint(my_string2[12], '==', my_string2[-1])\n\nG == G\n\n\n\nmy_string2[2:6]\n\n'AM A'\n\n\n\nmy_string2[2:-7]\n\n'AM A'\n\n\n\nmy_string2[-11:-7]\n\n'AM A'\n\n\n\nmy_string2[-11:6]\n\n'AM A'\n\n\nNote that you can go backwards, too, with the step paramater after the second colon.\nThe default value is 1.\n\nmy_string2[10:1:-1]\n\n'IRTS A MA'\n\n\n\nmy_string2[::2]\n\n'IA  TIG'"
  },
  {
    "objectID": "exercises/M02-Notes.html#mutability",
    "href": "exercises/M02-Notes.html#mutability",
    "title": "M02 Notes",
    "section": "Mutability",
    "text": "Mutability\nA mutable object is a data structure whose internal values can be changed.\nFor example, tuples are immutable, lists are not.\nDemonstration\nHere, we mutate a list by appending a value to it.\n\na = [1,2,3,4,5]\na.append(10)\nprint(a)\n\n[1, 2, 3, 4, 5, 10]\n\n\n\na[0] = 5\nprint(a)\n\n[5, 2, 3, 4, 5, 10]\n\n\nIf we try the same things with a tuple, we get an error.\n\nb = (1,2,3,4,5)\nb.append(10)\nprint(b)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\nb[0] = 5\nprint(b)\n\nTypeError: 'tuple' object does not support item assignment\n\n\nThis, on the other hand, is not mutation:\n\na = [1,2,3,4,5,10] # A list\nb = (1,2,3,4,5,10) # A tuple\nprint(a)\nprint(b)\n\n[1, 2, 3, 4, 5, 10]\n(1, 2, 3, 4, 5, 10)\n\n\nWe are just re-assigning a new value to the variable.\nThe new value just replaces the old one.\nIn mutation, the same data structure remains in place but its contents are changed.\nNote, however, that this works with tuples:\n\nb += (11,)\nprint(b)\n\n(1, 2, 3, 4, 5, 10, 11)\n\n\nIt looks like mutation, but it’s not.\nThis is because we are replacing b with a new tuple value.\n\nNotice that we write a single valued tuple with a comma. Why?\n\nBehavior\n\nView the video for this topic on Canvas.\n\nRelatedly, mutable and immutable objects behave differently.\nFor example, when you assign a variable to another variable of a\nmutable datatype, any changes to the data are reflected by both variables.\nThe new variable is just an alias for the old variable.\nThis is only true for mutable datatypes.\nLets explore how + operator behaves differently.\nFirst, let’s create a function that will allow us\nto compare the objects as we modify them.\n\ndef compare_objects(trial:int, obj1:str, obj2:str):\n    o1 = eval(obj1)\n    o2 = eval(obj2)\n    print(f\"t{trial} {obj1} {o1} {id(o1)}\")\n    print(f\"t{trial} {obj2} {o2} {id(o2)}\")\n    print(f\"{obj1} == {obj2}:\", o1 == o2)\n\nList t1\nWe initialize a list and make a copy of it.\nNote that the two variables share the same id.\n\na0 = [1,2,3,4,5]\na1 = a0 # Make a copy of a list\ncompare_objects(1, 'a0', 'a1')\n\nt1 a0 [1, 2, 3, 4, 5] 140486786318976\nt1 a1 [1, 2, 3, 4, 5] 140486786318976\na0 == a1: True\n\n\nList t2\nNow we add to the copy and note the effects on the original.\nThe original value is also changed.\nThis is because both variables point to the same object.\n\na1 += [12] # Extend the copy\ncompare_objects(2, 'a0', 'a1')\n\nt2 a0 [1, 2, 3, 4, 5, 12] 140486786318976\nt2 a1 [1, 2, 3, 4, 5, 12] 140486786318976\na0 == a1: True\n\n\nList t3\nNote, however, that if we don’t use the unary operator,\nthen a1 becomes a different object!\nLutz goes into the difference between the += and the + in Ch 11 pages 360-363.\n\n\n\nimage.png\n\n\n\na1 = a1 + [12] # Extend the copy\ncompare_objects(3, 'a0', 'a1')\n\nt3 a0 [1, 2, 3, 4, 5, 12] 140486786318976\nt3 a1 [1, 2, 3, 4, 5, 12, 12] 140485791147584\na0 == a1: False\n\n\nList t4\nTry it with a new object copy, to avoid any possible inference between t2 and t3.\n\na2 = a0\na2 = a2 + [12] # Extend the copy\ncompare_objects(4, 'a0', 'a2')\n\nt4 a0 [1, 2, 3, 4, 5, 12] 140486786318976\nt4 a2 [1, 2, 3, 4, 5, 12, 12] 140485791151296\na0 == a2: False\n\n\nWe get the same result.\nTuple t1\nLet’s try this with a tuple.\nWe see again that both variables have the same id.\n\nb0 = (1,2,3,4,5)\nb1 = b0 # Make a copy of a tuple\ncompare_objects(1, 'b0', 'b1')\n\nt1 b0 (1, 2, 3, 4, 5) 140485791255184\nt1 b1 (1, 2, 3, 4, 5) 140485791255184\nb0 == b1: True\n\n\nTuple t2\nHowever, if extend the tuple with the unary operator,\n b1 becomes a new object.\nNote how this differs from the list behavior.\n\nb1 += (12,) # Extend the copy\ncompare_objects(2, 'b0', 'b1')\n\nt2 b0 (1, 2, 3, 4, 5) 140485791255184\nt2 b1 (1, 2, 3, 4, 5, 12) 140485791104832\nb0 == b1: False\n\n\nTuple t3\nIf we don’t use the unary operator, the same thing happens again.\nThe value of b1 becomes a new object because the variable has been reassigned.\n\nb1 = b1 + (12,) # Extend the copy\ncompare_objects(3, 'b0', 'b1')\n\nt3 b0 (1, 2, 3, 4, 5) 140485791255184\nt3 b1 (1, 2, 3, 4, 5, 12, 12) 140485791318080\nb0 == b1: False\n\n\nLet’s look at another example.\nHere is a list:\n\nfoo = ['hi']\nbar = foo\ncompare_objects(1, 'foo', 'bar')\n\nt1 foo ['hi'] 140485791149952\nt1 bar ['hi'] 140485791149952\nfoo == bar: True\n\n\n\nbar += ['bye']\ncompare_objects(2, 'foo', 'bar')\n\nt2 foo ['hi', 'bye'] 140485791149952\nt2 bar ['hi', 'bye'] 140485791149952\nfoo == bar: True\n\n\n\nbar = bar + ['bye']\ncompare_objects(2, 'foo', 'bar')\n\nt2 foo ['hi', 'bye'] 140485791149952\nt2 bar ['hi', 'bye', 'bye'] 140485791173504\nfoo == bar: False\n\n\nAnd here is a tuple:\n\nfoo1 = ('hi')\nbar1 = foo1\ncompare_objects(1, 'foo1', 'bar1')\n\nt1 foo1 hi 140486835502896\nt1 bar1 hi 140486835502896\nfoo1 == bar1: True\n\n\n\nbar1 += ('bye')\ncompare_objects(2, 'foo1', 'bar1')\n\nt2 foo1 hi 140486835502896\nt2 bar1 hibye 140485792814832\nfoo1 == bar1: False"
  },
  {
    "objectID": "exercises/M02-Notes.html#comparing-floats",
    "href": "exercises/M02-Notes.html#comparing-floats",
    "title": "M02 Notes",
    "section": "Comparing floats",
    "text": "Comparing floats\nLet’s do an experiment:\n\nf1 = 0.1 + 0.2\nf2 = 0.3\n\n\nf1 == f2\n\nFalse\n\n\nIn the above case, f1 and f2 don’t hold precisely the same value because of the limitations of representing base-10 fractions in base-2 (binary).\nInspecting their values, we find minor differences in the lower significant digits:\n\nf1, f2\n\n(0.30000000000000004, 0.3)\n\n\nTo get around this problem, try using math.isclose() instead of ==:\n\nimport math\nmath.isclose(f1, f2)\n\nTrue\n\n\nNote that sometimes floating point comparisons do work:\n\nf3 = 4.0\nf4 = 3.5 + .5\n\n\nf3 == f4\n\nTrue\n\n\nSee the Wikipedia article on floating point arithmetic to learn more about how this arises.\nIt will provide you with insight into how computers actually work as machines that process numbers."
  },
  {
    "objectID": "exercises/M02-Notes.html#the-word-scalar",
    "href": "exercises/M02-Notes.html#the-word-scalar",
    "title": "M02 Notes",
    "section": "The word “scalar”",
    "text": "The word “scalar”\nSometimes you will see the word “scalar” in the literature to refer to certain kinds of values.\nScalars are single values as opposed to structures or collections of values.\n\nStrings as data types sometimes behave as scalars and sometimes as sequential structures."
  },
  {
    "objectID": "exercises/M03-Notes.html",
    "href": "exercises/M03-Notes.html",
    "title": "M03 Notes",
    "section": "",
    "text": "It’s kind of weird that \\(4\\) can be used in slices but not in accessing an element.\n\n\n\nimage.png"
  },
  {
    "objectID": "exercises/M03-Notes.html#quiz-02-question-8",
    "href": "exercises/M03-Notes.html#quiz-02-question-8",
    "title": "M03 Notes",
    "section": "",
    "text": "It’s kind of weird that \\(4\\) can be used in slices but not in accessing an element.\n\n\n\nimage.png"
  },
  {
    "objectID": "exercises/M03-Notes.html#task-7",
    "href": "exercises/M03-Notes.html#task-7",
    "title": "M03 Notes",
    "section": "Task 7",
    "text": "Task 7\nBuild a dictionary from the touchdowns data, calling it td, and print it. Use lists to store the values. Remember that dictionary keys must be unique. (1 PT)\n\ntd = {\n    'Alex': [2, 1],\n    'Patrick': [4],\n    'Tom': [1],\n    'Joe': [3]\n}\n\n\ntd\n\n{'Alex': [2, 1], 'Patrick': [4], 'Tom': [1], 'Joe': [3]}"
  },
  {
    "objectID": "exercises/M07-Exercises.html",
    "href": "exercises/M07-Exercises.html",
    "title": "M07 Exercises",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential\n\nExercise 7.1\nDefine a class called MyClass with the following features: - a docstring that says “Example class for Exercise 7.1” - a class attribute att1 with the default value \"foo\" - an __init__() function that takes one required string argument att2 and sets an instance attribute of att2 to that value - a method .add() that concatenates att1 and att2 and prints the result\n\nclass MyClass():\n    \"\"\"Example class for Exercise 7.1\"\"\"\n    \n    att1 = \"foo\"\n    \n    def __init__(self, att2):\n        self.att2 = att2\n        \n    def add(self):\n        self.msg = self.att1 + ' ' + self.att2\n        print(self.msg)\n\n\n\nExercise 7.2\nCreate an object instance of the previous class by passing the argument required by the initializing method.\nPass a short sentence for the string.\nUse the pattern object.attribute to show the two attributes.\nThen call the add() method.\n\nobj_1 = MyClass(\"This is not a pipe\")\n\n\nobj_1.att1, obj_1.att2\n\n('foo', 'This is not a pipe')\n\n\n\nobj_1.add()\n\nfoo This is not a pipe\n\n\n\n\nExercise 7.3\nCreate a class called Student that contains a student’s grades for a given class. * It should store the grades as a Pandas Series of type float. * It should have an initialization method that takes the student’s full name and user ID. * It should have a method to add an assignment with its grade to the Series object. * Hint: to add a new observation (row) to a Series, you can do this: foo.loc['new_key'] = new_value * It should also have a method to plot the student’s grades as a bar chart. * The plot should have a title stating the student’s name, and ID in parentheses.\n\nimport pandas as pd\n\nclass Student:\n    \n    def __init__(self, student_name, student_id): \n        self.name = student_name\n        self.id = student_id\n        self.grades = pd.Series(dtype=float)\n    \n    def add_grade(self, assignment, grade):\n        self.grades.loc[assignment] = grade\n    \n    def show_grades(self):\n        self.grades.plot.bar(title=f\"Grades for {self.name} ({self.id})\")\n    \n\n\n\nExercise 7.3a\nCreate an instance of a student with four grades. * Make up a name and an id. * Use HW01, HW02, HW03, and HW04 as assignment names. * Use the show_grades() to plot the grades.\n\nstudent1 = Student(\"Quetzil Castaneda\", 'qc4x')\n\n\nstudent1.add_grade(\"HW01\", 100)\nstudent1.add_grade(\"HW02\", 95)\nstudent1.add_grade(\"HW03\", 91)\nstudent1.add_grade(\"HW04\", 98)\n\n\nstudent1.show_grades()\n\n\n\n\n\n\n\n\n\n\nExercise 7.4\nThe fictitious company UVAWS offers cloud computing as a service with a range of server options. Define and use with a class that instantiates a cloud server. Define a class with these requirements:\n\nName: V3\nInstance Attributes:\n\ninstance_size a string, which expects one of small, medium , and large\nnum_vcpus an integer for the number of virtual CPUs.\nmemory an integer for the number of GBs.\ndisk_space a float for the number of TBs.\n\nMethods (with parameters):\n\n__init__() That sets all of the attributes above.\nadd_disk_space(amt_to_add). This adds disk space to the current disk space.\n\namt_to_add expects a float.\n\nhas_enough_disk_space(amt_required) this checks if the amount required is available.\n\namt_required expects a float.\nUse natural language to print an appropriate response while also returning a boolean value.\nReturn True if enough space, False if not.\n\n\n\n\nclass V3():\n    \n    def __init__(self, instance_size, num_vcpus, memory, disk_space):\n        self.instance_size = instance_size\n        self.num_vcpus = num_vcpus\n        self.memory = memory\n        self.disk_space = disk_space\n        \n    def add_disk_space(self, amt_to_add):\n        self.disk_space += amt_to_add\n        \n    def has_enough_disk_space(self, amt_required):\n        if self.disk_space &gt;= amt_required:\n            print(\"You have enough disk space!\")\n            return True\n        else:\n            print(\"You don't have enough disk space!\")\n            return False\n\n\n\nExercise 7.5\nInstantiate a V3 object with these attribute values:\ninstance_size: 'large'\nnum_vcpus:     32\nmemory:        256\ndisk_space:    1.\nThen: 1. Add \\(2.0\\) TB disk space to the instance. 2. Display the updated disk space using dot operator to display the attribute. 3. See if the instance has enough disk space, using a request of \\(10.0\\) TB.\n\nmy_v3 = V3('large', 32, 256, 1.)\nmy_v3.add_disk_space(2.)\n\n\nmy_v3.disk_space\n\n3.0\n\n\n\nmy_v3.has_enough_disk_space(10.)\n\nYou don't have enough disk space!\n\n\nFalse\n\n\n\n\nExercise 7.6\nWrite a Python class named Circle constructed by a radius.\nInclude two methods: one to compute the area, the other the circumference of the circle.\nStore both values as attributes rounded to the second decimal place.\nShow the values by printing the attributes.\nHint: For the value of \\(\\pi\\) use this line:\nfrom math import pi\n\nfrom math import pi \n\nclass Circle():\n        \n    def __init__(self, radius):\n        self.radius = radius\n\n    def get_area(self):\n        self.area = round(self.radius**2 * pi, 2)\n    \n    def get_circumference(self):\n        self.circumference = round(2 * self.radius * pi, 2)\n\n\nmy_circle = Circle(8)\nmy_circle.get_area()\nmy_circle.get_circumference()\n\n\nprint('A:', my_circle.area)\nprint('C:', my_circle.circumference)\n\nA: 201.06\nC: 50.27\n\n\n\n\nExercise 7.7\nWrite a Python class named Rectangle constructed by a length and width.\nInclude a method that will compute the area of the rectangle.\nSave the area as a private attribute, but include another method to return this value.\nCreate an instance of the class with two integers of your choice and show the area.\n\nclass Rectangle():\n    \n    def __init__(self, length, width):\n        self.length = length\n        self.width  = width\n\n    def compute_area(self):\n        self._area = self.length * self.width\n        \n    def get_area(self):\n        return self._area\n\n\nnewRectangle = Rectangle(12, 10)\n\n\nnewRectangle.compute_area()\n\n\nnewRectangle.get_area()\n\n120\n\n\n\n\nExercise 7.8\nWrite a class Geometry with a single static method to compute the area of a rectangle.\nCall the method with length as \\(10\\) and width as \\(15\\).\n\nclass Geometry():\n    \n    def get_rectangle_area(l, w):\n        return l * w\n\n\nGeometry.get_rectangle_area(10, 15)\n\n150\n\n\n\n\nExercise 7.9\nCreate a static class T2T that converts degrees between Celsius to Fahrenhein.\nCreate two methods c2f and f2c using lambda functions.\nUse these formulas: \\(F = 1.8C + 32\\) and \\(C = (F − 32) / 1.8\\)\nThe class should work like this: Calling T2T.c2f(45) should print the answer 113.0.\n\nclass T2T:\n    c2f = lambda c: round(1.8 * c + 32, 2)\n    f2c = lambda f: round((f - 32) / 1.8, 2)        \n\n\nT2T.c2f(45)\n\n113.0\n\n\n\nT2T.f2c(32)\n\n0.0"
  },
  {
    "objectID": "exercises/M11-Exercises.html",
    "href": "exercises/M11-Exercises.html",
    "title": "M11 Exercises",
    "section": "",
    "text": "DS 5100 | Spring 2024 | Online\n\nExercise 11.1\nInstall Tidyverse\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nExercise 11.2\nWe create a super simple tibble to use in the exercises.\nYou can find a text file called exercise-data.txt in the directory of today’s module (M11).\nJust cut and paste it into you code.\n\nscores &lt;- \n  tibble(\n    name = c(\"mike\", \"carol\", \"greg\", \"marcia\", \"peter\", \"jan\", \"bobby\", \"cindy\", \"alice\"),\n    school = c(\"south\", \"south\", \"south\", \"south\", \"north\", \"north\", \"north\", \"south\", \"south\"),\n    teacher = c(\"johnson\", \"johnson\", \"johnson\", \"johnson\",  \"smith\", \"smith\", \"smith\", \"perry\", \"perry\"),\n    sex = c(\"male\", \"female\", \"male\", \"female\", \"male\", \"female\", \"male\", \"female\", \"female\"),\n    math_score = c(4, 3, 2, 4, 3, 4, 5, 4, 5),\n    reading_score = c(1, 5, 2, 4, 5, 4, 1, 5, 4)\n)\n\n\n\nExercise 11.3\nView the tibble.\n\nscores\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\nprint(scores)\n\n# A tibble: 9 × 6\n  name   school teacher sex    math_score reading_score\n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1 mike   south  johnson male            4             1\n2 carol  south  johnson female          3             5\n3 greg   south  johnson male            2             2\n4 marcia south  johnson female          4             4\n5 peter  north  smith   male            3             5\n6 jan    north  smith   female          4             4\n7 bobby  north  smith   male            5             1\n8 cindy  south  perry   female          4             5\n9 alice  south  perry   female          5             4\n\n\n\n\nExercise 11.4\nMake sure you understand the difference between\n\ndoing something and assigning it to a variable\nand just doing it without assigning it\n\nwhen using %&gt;%.\nFirst, just get the first three rows (using slice()).\nThen, assign the first three rows to a variable.\n\nscores %&gt;% \n  slice(1:3)\n\n\n\nA tibble: 3 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\nGet the first 3 rows, and assign it to a new name scores_small.\n\nscores_small &lt;- scores %&gt;% \n  slice(1:3)\n\nSee what’s in scores_small.\n\nscores_small\n\n\n\nA tibble: 3 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\nAnother option:\n\nscores %&gt;% head(3)\n\n\n\nA tibble: 3 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\nAnd the old way:\n\nscores[1:3,]\n\n\n\nA tibble: 3 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\n\n\nPart 1: Arrange\n\n\nExercise 11.5\nSort the data by math_score from high to low.\nWho had the best math score?\n\nscores %&gt;% \n  arrange(desc(math_score))\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\nAnswer: Bobby and Alice both tied for the highest math score\n\n\nExercise 11.6\nSort the data by name in alphabetical order.\n\nscores %&gt;% \n  arrange(name)\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\n\n\n\n\n\n\nExercise 11.7\nSort the data by sex so females show up first.\n\nscores %&gt;% \n  arrange(sex)\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\n\n\n\n\n\n\nExercise 11.8\nSort the data by school, teacher, sex, math_score, and reading_score.\n\nscores %&gt;%\n    arrange(school, teacher, sex, math_score, reading_score)\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\n\nPart 2: Select\n\n\nExercise 11.9\nSelect only name, math_score, and reading_score.\n\nscores %&gt;% \n  select(name, math_score, reading_score)\n\n\n\nA tibble: 9 × 3\n\n\nname\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\n4\n1\n\n\ncarol\n3\n5\n\n\ngreg\n2\n2\n\n\nmarcia\n4\n4\n\n\npeter\n3\n5\n\n\njan\n4\n4\n\n\nbobby\n5\n1\n\n\ncindy\n4\n5\n\n\nalice\n5\n4\n\n\n\n\n\n\n\n\nExercise 11.10\nSelect all of the columns except the sex column.\n\nscores %&gt;% \n  select(-sex)\n\n\n\nA tibble: 9 × 5\n\n\nname\nschool\nteacher\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\n4\n1\n\n\ncarol\nsouth\njohnson\n3\n5\n\n\ngreg\nsouth\njohnson\n2\n2\n\n\nmarcia\nsouth\njohnson\n4\n4\n\n\npeter\nnorth\nsmith\n3\n5\n\n\njan\nnorth\nsmith\n4\n4\n\n\nbobby\nnorth\nsmith\n5\n1\n\n\ncindy\nsouth\nperry\n4\n5\n\n\nalice\nsouth\nperry\n5\n4\n\n\n\n\n\n\n\n\nExercise 11.11\nSelect all of the columns except the math_score and reading_score columns.\n\nscores %&gt;% \n  select(-sex, -reading_score)\n\n\n\nA tibble: 9 × 4\n\n\nname\nschool\nteacher\nmath_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\n4\n\n\ncarol\nsouth\njohnson\n3\n\n\ngreg\nsouth\njohnson\n2\n\n\nmarcia\nsouth\njohnson\n4\n\n\npeter\nnorth\nsmith\n3\n\n\njan\nnorth\nsmith\n4\n\n\nbobby\nnorth\nsmith\n5\n\n\ncindy\nsouth\nperry\n4\n\n\nalice\nsouth\nperry\n5\n\n\n\n\n\n\n\n\nExercise 11.12\nKeep all of the columns but rearrange them so that sex is the first column.\n\nscores %&gt;% \n  select(sex, everything())\n\n\n\nA tibble: 9 × 6\n\n\nsex\nname\nschool\nteacher\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmale\nmike\nsouth\njohnson\n4\n1\n\n\nfemale\ncarol\nsouth\njohnson\n3\n5\n\n\nmale\ngreg\nsouth\njohnson\n2\n2\n\n\nfemale\nmarcia\nsouth\njohnson\n4\n4\n\n\nmale\npeter\nnorth\nsmith\n3\n5\n\n\nfemale\njan\nnorth\nsmith\n4\n4\n\n\nmale\nbobby\nnorth\nsmith\n5\n1\n\n\nfemale\ncindy\nsouth\nperry\n4\n5\n\n\nfemale\nalice\nsouth\nperry\n5\n4\n\n\n\n\n\n\n\n\nPart 3: Filter\n\n\nExercise 11.13\nFilter by students who are male and went to south.\nOption 1\n\nscores %&gt;% \n  filter(sex == \"male\" & school == \"south\")\n\n\n\nA tibble: 2 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\nOption 2\nUseing a comma , instead of &.\n\nscores %&gt;% \n  filter(sex == \"male\", school == \"south\")\n\n\n\nA tibble: 2 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\n\n\n\n\n\n\nExercise 11.14\nFilter by students who did above average in math.\n\nscores %&gt;%\n    filter(math_score &gt; mean(math_score))\n\n\n\nA tibble: 6 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\n\nExercise 11.15\nUse filter() to figure out how many students had a math score of 4 or more and a reading score of 3 or more.\n\nscores %&gt;%\n    filter(math_score &gt;= 4 & reading_score &gt;= 3)\n\n\n\nA tibble: 4 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\n\nExercise 11.16\nFilter by students who got a 3 or worse in either math or reading.\n\nscores %&gt;%\n    filter(math_score &lt;= 3 | reading_score &lt;= 3)\n\n\n\nA tibble: 5 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\n\n\n\n\n\n\nExercise 11.17\nFilter by students who got a reading score of 2, 3, or 4.\n\nscores %&gt;%\n    filter(reading_score == 2 | reading_score == 3 | reading_score == 4)\n\n\n\nA tibble: 4 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\nscores %&gt;%\n    filter(reading_score &gt;= 2 & reading_score &lt;= 4)\n\n\n\nA tibble: 4 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\nscores %&gt;%\n    filter(reading_score %in% 2:4)\n\n\n\nA tibble: 4 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\n\nExercise 11.18\nFilter by students who have a name that starts with 'm'.\nHint: type ?substr in the console and then scroll to the bottom of the help file to see useful examples.\n\n# ?substr\n\n\nscores %&gt;%\n    filter(substr(name, 1, 1) == 'm')\n\n\n\nA tibble: 2 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\n\n\n\n\n\n\nPart 4: Filter with groups\n\n\nExercise 11.19\nFilter to teachers whose best math student got a score of 5.\n\nscores %&gt;% \n  group_by(teacher) %&gt;% \n  filter(max(math_score) == 5)\n\n\n\nA grouped_df: 5 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\nNote that all students from both teachers are shown.\n\n\nExercise 11.20\nFilter to the sex with a mean math score of 4.\n\nscores %&gt;%\n    group_by(sex) %&gt;%\n    filter(mean(math_score) == 4)\n\n\n\nA grouped_df: 5 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n\n\n\n\n\n\n\n\nPart 5: Mutate\n\n\nExercise 11.21\nSet the math and reading scores 10 times their original values.\n\nscores %&gt;% \n  mutate(\n      math_score =  math_score * 10, \n      reading_score = reading_score * 10\n  )\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n40\n10\n\n\ncarol\nsouth\njohnson\nfemale\n30\n50\n\n\ngreg\nsouth\njohnson\nmale\n20\n20\n\n\nmarcia\nsouth\njohnson\nfemale\n40\n40\n\n\npeter\nnorth\nsmith\nmale\n30\n50\n\n\njan\nnorth\nsmith\nfemale\n40\n40\n\n\nbobby\nnorth\nsmith\nmale\n50\n10\n\n\ncindy\nsouth\nperry\nfemale\n40\n50\n\n\nalice\nsouth\nperry\nfemale\n50\n40\n\n\n\n\n\n\n\n\nExercise 11.22\nCreate a new column called math_reading_avg which is the average of a student’s math and reading scores.\nThat is, combine the two scores and take their average.\n\nscores %&gt;% \n    mutate(math_reading_avg = (math_score + reading_score) / 2)\n\n\n\nA tibble: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nmath_reading_avg\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n2.5\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n4.0\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n2.0\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n4.0\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n4.0\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n4.0\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n3.0\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n4.5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n4.5\n\n\n\n\n\n\n\n\nExercise 11.23\nCreate a new column high_math_achiever that is an indicator of if a student got a 4 or better on their math score.\n\nscores %&gt;% \n  mutate(high_math_achiever = math_score &gt;= 4)\n\n\n\nA tibble: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nhigh_math_achiever\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;lgl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\nTRUE\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\nFALSE\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\nFALSE\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\nTRUE\n\n\npeter\nnorth\nsmith\nmale\n3\n5\nFALSE\n\n\njan\nnorth\nsmith\nfemale\n4\n4\nTRUE\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\nTRUE\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\nTRUE\n\n\nalice\nsouth\nperry\nfemale\n5\n4\nTRUE\n\n\n\n\n\n\n\n\nExercise 11.24\nCreate a new column reading_score_centered that is a student’s reading score minus the mean of all students’ reading scores.\n\nscores %&gt;% \n  mutate(reading_score_centered = reading_score - mean(reading_score))\n\n\n\nA tibble: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nreading_score_centered\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n-2.4444444\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n1.5555556\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n-1.4444444\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n0.5555556\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n1.5555556\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n0.5555556\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n-2.4444444\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n1.5555556\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n0.5555556\n\n\n\n\n\n\nNote how this may be confusing: reading_score is used twice in the mutate() arugment.\nIn the first case, it refers to value for the current observation.\nIn the second case, it refers to the all the values.\n\n\nExercise 11.25\nCreate a new column called science_score that adds the square of math_score to reading_score.\nDisplay the result by sorting on the new column in descending order.\n\nscores %&gt;% \n    mutate(science_score = math_score**2 + reading_score) %&gt;%\n    arrange(desc(science_score))\n\n\n\nA tibble: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nscience_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n29\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n26\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n21\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n20\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n20\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n17\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n14\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n14\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n6\n\n\n\n\n\n\n\n\nPart 6: Mutate with groups\n\n\nExercise 11.26\nCreate a math_score_centered_by_sex column that subtracts a student’s math_score from the mean math_score by sex.\nDisplay the results in descending order on the new column.\n\nscores %&gt;% \n  group_by(sex) %&gt;% \n  mutate(math_score_centered_by_sex = math_score - mean(math_score)) %&gt;%\n  arrange(desc(math_score_centered_by_sex))\n\n\n\nA grouped_df: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nmath_score_centered_by_sex\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n1.5\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n1.0\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n0.5\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n0.0\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n0.0\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n0.0\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n-0.5\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n-1.0\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n-1.5\n\n\n\n\n\n\nQuestion: If Mike and Cindy both got a 4 for their math score, then\nwhy does Mike have a higher math_score_centered_by_sex score?\nAnswer: He is higher relative to the other males, which are lower overall.\n\n\nExercise 11.27\nCreate a reading_score_centered_by_teacher column.\n\nscores %&gt;% \n  group_by(teacher) %&gt;% \n  mutate(math_score_centered_by_teacher = math_score - mean(math_score))\n\n\n\nA grouped_df: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nmath_score_centered_by_teacher\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n0.75\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n-0.25\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n-1.25\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n0.75\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n-1.00\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n0.00\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n1.00\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n-0.50\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n0.50\n\n\n\n\n\n\n\n\nExercise 11.28\nMake a number_of_students_in_class column that is number of students in a teacher’s class.\nFor example, it should be 4 for mike and 3 for peter.\n\nscores %&gt;% \n  group_by(teacher) %&gt;% \n  mutate(number_of_students_in_class = n())\n\n\n\nA grouped_df: 9 × 7\n\n\nname\nschool\nteacher\nsex\nmath_score\nreading_score\nnumber_of_students_in_class\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n\n\n\n\nmike\nsouth\njohnson\nmale\n4\n1\n4\n\n\ncarol\nsouth\njohnson\nfemale\n3\n5\n4\n\n\ngreg\nsouth\njohnson\nmale\n2\n2\n4\n\n\nmarcia\nsouth\njohnson\nfemale\n4\n4\n4\n\n\npeter\nnorth\nsmith\nmale\n3\n5\n3\n\n\njan\nnorth\nsmith\nfemale\n4\n4\n3\n\n\nbobby\nnorth\nsmith\nmale\n5\n1\n3\n\n\ncindy\nsouth\nperry\nfemale\n4\n5\n2\n\n\nalice\nsouth\nperry\nfemale\n5\n4\n2\n\n\n\n\n\n\n\n\nPart 7: Summarize\n\n\nExercise 11.29\nUse summarize() command to find the mean math score for all students.\n\nscores %&gt;% \n  summarize(math_score_mean = mean(math_score))\n\n\n\nA tibble: 1 × 1\n\n\nmath_score_mean\n\n\n&lt;dbl&gt;\n\n\n\n\n3.777778\n\n\n\n\n\n\nNote how summarize() creates a new column, like mutate().\nIt does this because it creates a new table.\n\n\nExercise 11.30\nFind the mean reading score for all students.\n\nscores %&gt;% \n  summarize(math_score_mean = mean(reading_score))\n\n\n\nA tibble: 1 × 1\n\n\nmath_score_mean\n\n\n&lt;dbl&gt;\n\n\n\n\n3.444444\n\n\n\n\n\n\n\n\nExercise 11.31\nFind the mean for math scores and reading scores added together.\nCall the column both_score_mean.\n\nscores %&gt;% \n  summarize(both_score_mean = mean((math_score + reading_score)/2))\n\n\n\nA tibble: 1 × 1\n\n\nboth_score_mean\n\n\n&lt;dbl&gt;\n\n\n\n\n3.611111\n\n\n\n\n\n\n\n\nPart 8: Summarize with groups\n\n\nExercise 11.32\nFind the minimum math score for each school.\n\nscores %&gt;% \n  group_by(school) %&gt;% \n  summarize(min_math_score = min(math_score))\n\n\n\nA tibble: 2 × 2\n\n\nschool\nmin_math_score\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nnorth\n3\n\n\nsouth\n2\n\n\n\n\n\n\n\n\nExercise 11.33\nFind the maximum math score for each teacher.\n\nscores %&gt;% \n  group_by(teacher) %&gt;% \n  summarize(max_math_score = max(math_score))\n\n\n\nA tibble: 3 × 2\n\n\nteacher\nmax_math_score\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\njohnson\n4\n\n\nperry\n5\n\n\nsmith\n5\n\n\n\n\n\n\nExcercise 11.19 Redone\n\nscores %&gt;% \n    group_by(teacher) %&gt;% \n    summarize(max_math = max(math_score)) %&gt;%\n    filter(max_math == 5) %&gt;%\n    select(teacher)\n\n\n\nA tibble: 2 × 1\n\n\nteacher\n\n\n&lt;chr&gt;\n\n\n\n\nperry\n\n\nsmith\n\n\n\n\n\n\n\n\nExercise 11.34\nIf we grouped by sex, and then summarized with the minimum reading score, how many rows would the resulting data frame have?\n2, because there are 2 values for sex in the table.\nGroup by with summarization operations yield dataframes with the same number of rows as distinct values in the grouping.\nThis is an example of the Split-Apply-Combine pattern. * To group is to split by distinct value of some feature of set of features * To summarize to apply some aggregate function to each group * To combine means to bind the resulting single row tables into one table, with one row for each group\nSee this article by Brian S. Yandell, a professor of statistics at Wisconsin, for a deeper dive into this topic.\n\nscores %&gt;% \n  group_by(sex) %&gt;%\n  summarize(min_reading_score = min(reading_score))\n\n\n\nA tibble: 2 × 2\n\n\nsex\nmin_reading_score\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nfemale\n4\n\n\nmale\n1\n\n\n\n\n\n\n\n\nExercise 11.35\nCreate a data frame with the mean and median reading score by sex, as well as the number of students of that sex.\n\nscores %&gt;% \n  group_by(sex) %&gt;% \n  summarize(mean_reading_score = mean(reading_score), \n            median_reading_score = median(reading_score), \n            n = n())\n\n\n\nA tibble: 2 × 4\n\n\nsex\nmean_reading_score\nmedian_reading_score\nn\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n\n\n\n\nfemale\n4.40\n4.0\n5\n\n\nmale\n2.25\n1.5\n4\n\n\n\n\n\n\n\n\nPart 9: Combining verbs\n\n\nExercise 11.36\nSelect just the name and math_score columns.\nThen create a new column math_score_ec that is a students math score plus 5 extra credit points.\nFinally, arrange the data frame by math_score_ec from low to high.\n\nscores %&gt;% \n  select(name, math_score) %&gt;% \n  mutate(math_score_ec = math_score + 5) %&gt;% \n  arrange(math_score_ec)\n\n\n\nA tibble: 9 × 3\n\n\nname\nmath_score\nmath_score_ec\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ngreg\n2\n7\n\n\ncarol\n3\n8\n\n\npeter\n3\n8\n\n\nmike\n4\n9\n\n\nmarcia\n4\n9\n\n\njan\n4\n9\n\n\ncindy\n4\n9\n\n\nbobby\n5\n10\n\n\nalice\n5\n10\n\n\n\n\n\n\n\n\nExercise 11.37\nSelect every column except the teacher column.\nCreate a new variabled called mean_score that is the mean of a student’s math and reading score.\nFinally, arrange the data frame by mean_score from low to high.\n\nscores %&gt;% \n  select(-teacher) %&gt;% \n  mutate(mean_score = (math_score + reading_score)/2) %&gt;% \n  arrange(mean_score)\n\n\n\nA tibble: 9 × 6\n\n\nname\nschool\nsex\nmath_score\nreading_score\nmean_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\ngreg\nsouth\nmale\n2\n2\n2.0\n\n\nmike\nsouth\nmale\n4\n1\n2.5\n\n\nbobby\nnorth\nmale\n5\n1\n3.0\n\n\ncarol\nsouth\nfemale\n3\n5\n4.0\n\n\nmarcia\nsouth\nfemale\n4\n4\n4.0\n\n\npeter\nnorth\nmale\n3\n5\n4.0\n\n\njan\nnorth\nfemale\n4\n4\n4.0\n\n\ncindy\nsouth\nfemale\n4\n5\n4.5\n\n\nalice\nsouth\nfemale\n5\n4\n4.5\n\n\n\n\n\n\n\n\nExercise 11.38\nRemove any students with 'smith' as a teacher, then find the mean math_score by sex.\n\nscores %&gt;% \n  filter(teacher != \"smith\") %&gt;% \n  group_by(sex) %&gt;% \n  summarize(mean_math_score = mean(math_score))\n\n\n\nA tibble: 2 × 2\n\n\nsex\nmean_math_score\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nfemale\n4\n\n\nmale\n3\n\n\n\n\n\n\n\n\nExercise 11.39\nFind the min, max, and median reading_score for female students at south school.\n\nscores %&gt;% \n  filter(sex == \"female\", school == \"south\") %&gt;% \n  summarize(min_reading_score = min(reading_score),\n            max_reading_score = max(reading_score),\n            median_reading_score = median(reading_score))\n\n\n\nA tibble: 1 × 3\n\n\nmin_reading_score\nmax_reading_score\nmedian_reading_score\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n4\n5\n4.5\n\n\n\n\n\n\n\n\nExercise 11.40\nInspect each of the following code blocks. They both do about the same thing. Which one do you think is preffered from a computer efficiency standpoint?\nCode block 1\n\nscores %&gt;% \n  group_by(school, teacher) %&gt;% \n  summarize(max_math_score = max(math_score)) %&gt;% \n  filter(school == \"south\")\n\n`summarise()` has grouped output by 'school'. You can override using the\n`.groups` argument.\n\n\n\n\nA grouped_df: 2 × 3\n\n\nschool\nteacher\nmax_math_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nsouth\njohnson\n4\n\n\nsouth\nperry\n5\n\n\n\n\n\n\nCode block 2\n\nscores %&gt;% \n  filter(school == \"south\") %&gt;% \n  group_by(teacher) %&gt;% \n  summarize(max_math_score = max(math_score))\n\n\n\nA tibble: 2 × 2\n\n\nteacher\nmax_math_score\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\njohnson\n4\n\n\nperry\n5\n\n\n\n\n\n\nAnswer: They both get the max math score by teacher for teachers at south school. The first block calculates the max_math_score for both north and south and then filters out north after that calculation. The second block filters out north right away. This is preferred because it prevents the computer from making unnecessary calculations.\nRegarding the error, we could have done this in the first code block:\n\nscores %&gt;% \n  group_by(school, teacher) %&gt;% \n  summarize(max_math_score = max(math_score), .groups = 'keep') %&gt;% \n  filter(school == \"south\")\n\n\n\nA grouped_df: 2 × 3\n\n\nschool\nteacher\nmax_math_score\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nsouth\njohnson\n4\n\n\nsouth\nperry\n5\n\n\n\n\n\n\n\n\nCredits\nThis notebook is adapted largely from Stenhaug’s “The 5 verbs of dplyr”"
  },
  {
    "objectID": "exercises/M04-Notes.html",
    "href": "exercises/M04-Notes.html",
    "title": "M04 Notes",
    "section": "",
    "text": "An alternate solution to HW03 Task 1\nThe main ideas are: 1. Expressions behave as values. 2. Boolean expressions evaluate to numeric values. 3. Compound expressions can be replaced by arithmetic.\nRegarding #3, note how conditions 1, 2, and 3 are met implicitly by the use of multiplication and addition.\n\nN = range(1, 101)\nA = [(x % 3 == 0) * 'Wahoo' for x in N]\nB = [(x % 5 == 0) * 'wah!' for x in N]\nC = [a + b for a, b in zip(A, B) if a + b]\n\n\nprint('\\n'.join(C))\nprint(len(C))\n\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\nWahoo\nWahoowah!\nWahoo\nwah!\nWahoo\nWahoo\nwah!\n47\n\n\nA closer look …\n\nprint(A) # A list with a value every 3rd element\n\n['', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '', '', 'Wahoo', '']\n\n\n\nprint(B) # A list with a value every 5th element\n\n['', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!', '', '', '', '', 'wah!']\n\n\n\nfor x in N:\n    print(str(x).zfill(2), ' ', A[x-1], B[x-1], sep='') if A[x-1] or B[x-1] else next\n\n03 Wahoo\n05 wah!\n06 Wahoo\n09 Wahoo\n10 wah!\n12 Wahoo\n15 Wahoowah!\n18 Wahoo\n20 wah!\n21 Wahoo\n24 Wahoo\n25 wah!\n27 Wahoo\n30 Wahoowah!\n33 Wahoo\n35 wah!\n36 Wahoo\n39 Wahoo\n40 wah!\n42 Wahoo\n45 Wahoowah!\n48 Wahoo\n50 wah!\n51 Wahoo\n54 Wahoo\n55 wah!\n57 Wahoo\n60 Wahoowah!\n63 Wahoo\n65 wah!\n66 Wahoo\n69 Wahoo\n70 wah!\n72 Wahoo\n75 Wahoowah!\n78 Wahoo\n80 wah!\n81 Wahoo\n84 Wahoo\n85 wah!\n87 Wahoo\n90 Wahoowah!\n93 Wahoo\n95 wah!\n96 Wahoo\n99 Wahoo\n100 wah!\n\n\n\n\nIn-Place Functions\nIn-place functions directly change the value of what they operate on,\nas opposed to expecting these changes to be returned and used to update a value.\nFor example, a typical function may work like this:\nx = 1 \nadd_one(x)\n# x remains the same.\n\nx = add_one(x)\n# x is now 2\nA function that performs an in-place operation would work like this:\nx = 1\nadd_one(x)\n# x is now 2\n\nx = [i for i in range(10)]\n\n\nx\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nx.pop()\n\n9\n\n\n\nx\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\nx.insert(0, 10)\n\n\nx\n\n[10, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\nx.append(50)\n\n\nx\n\n[10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 50, 50]\n\n\n\nx.reverse()\n\n\nx\n\n[50, 50, 8, 7, 6, 5, 4, 3, 2, 1, 0, 10]\n\n\nThese functions do not perform in-place operations:\n\nsorted(x)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 50, 50]\n\n\n\nx\n\n[50, 50, 8, 7, 6, 5, 4, 3, 2, 1, 0, 10]\n\n\n\nlist(reversed(x))\n\n[10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 50, 50]\n\n\n\nx\n\n[50, 50, 8, 7, 6, 5, 4, 3, 2, 1, 0, 10]\n\n\n\n\nIn-Place Operations\nPython has a library of functions that perform in-place operations.\na += b is the same as operator.iadd(a, b)\n\nimport operator\n\n\na = [1,2,3]\nb = [4,5,6]\n\n\noperator.iadd(a, b)\n\n[1, 2, 3, 4, 5, 6]\n\n\n\na, b\n\n([1, 2, 3, 4, 5, 6], [4, 5, 6])\n\n\n\noperator.imul(a, 2)\n\n[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n\n\n\na\n\n[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]"
  },
  {
    "objectID": "exercises/M02_Exercise.html",
    "href": "exercises/M02_Exercise.html",
    "title": "DS 5100 Activities",
    "section": "",
    "text": "mystr ='python'\nlen(mystr) &gt;=6\n\nTrue\n\n\nprint(mystr[:3]) print(mystr[-3:])\n\nnewlist = [3,4,5]\nprint(newlist[1:2])\n\n[4]\n\n\n\notherlist =[]\notherlist.append('first')\notherlist.append('second')\notherlist.append('third')\nprint(otherlist[1])\n\nsecond\n\n\n\nmytuple = 21,16,14\ntuple2 = (1,2,3)\ntuple3 = tuple([1,2,3])\nprint(mytuple)\nprint(tuple2)\nprint(tuple3)\n\n(21, 16, 14)\n(1, 2, 3)\n(1, 2, 3)\n\n\n\nvar = 'hamster'\ncat = {'dog', 'cat', 'parrot', 'hamster'}\nvar in cat\n\nTrue"
  },
  {
    "objectID": "exercises/M05-Exericises.html",
    "href": "exercises/M05-Exericises.html",
    "title": "Module 05",
    "section": "",
    "text": "DS 5100 | Summer 2024 | Residential\n\nTime\n\n\nExercise 5.1\nWrite a for loop to build a list containing the integers 1 to 100,000 where all odd numbers have negative sign\nTime the code using time().\nPrint out the result time delta.\n\nimport time \n\n\nt0 = time.time()\nvals = []\nfor i in range(1, 100001):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\nprint('runtime: ', time.time() - t0)\n\nruntime:  0.01307368278503418\n\n\n\n\nExercise 5.2\nWrite a list comprehension to build the list, and time it using time()\nRemember: While we put the for loop before if statements, it is different with if else statements.\nif else statements precede a for loop in a list comprehension.\n\nt0 = time.time()\nvals = [i * -1 if i % 2 == 1 else i for i in range(1,100001)]\nprint('runtime: ', time.time() - t0)\n\nruntime:  0.007518768310546875\n\n\nWith a lambda function …\n\nt0 = time.time()\nvals = [(lambda x: x * -1 if i % 2 == 1 else x)(i) for i in range(1, 100001)]\nprint('runtime: ', time.time() - t0)\n\nruntime:  0.0173189640045166\n\n\n\n# vals\n\n\n\nNumPy\n\nimport numpy as np\n\n\n\nExercise 5.3\nUse NumPy to generate \\(10\\) random integers ranging from \\(1\\) to \\(6\\) inclusive.\nSave the results in a list and then print the list as a comma-delimitted string.\nHint: Use NumPy’s random.randint() function.\nHint: ', '.join(my_list_like)\n\n# np.random.randint?\n\nrandint(low, high=None, size=None, dtype=int)\n\nrandos = np.random.randint(1, 7, 10)\n\n\nprint(', '.join(randos).astype(str))\n\nTypeError: sequence item 0: expected str instance, numpy.int64 found\n\n\n\ntype(randos)\n\nnumpy.ndarray\n\n\n\nrandos.astype(str))\n\nSyntaxError: unmatched ')' (512353796.py, line 1)\n\n\n\n\nExercise 5.4\nUse random.randomint() to generate a single random integer and print the type of the result.\nThen generate \\(5\\) random integers between \\(1\\) and \\(21\\) and print the type of the result.\nWhat difference do you see?\n\nr1 = np.random.randint(10)\n\n\ntype(r1)\n\nint\n\n\n\nr2 = np.random.randint(1, 21, 5)\n\n\ntype(r2)\n\nnumpy.ndarray\n\n\n\n\nExercise 5.5\nPlot a histogram of the array for random integers you just created.\nHint: Import Matplotlib’s Histogram function as follows:\nfrom matplotlib.pyplot import hist\nThen pass the array to hist().\n\nfrom matplotlib.pyplot import hist\n\n\nhist(r2)\n\n(array([2., 0., 0., 1., 0., 0., 1., 0., 0., 1.]),\n array([ 1. ,  2.6,  4.2,  5.8,  7.4,  9. , 10.6, 12.2, 13.8, 15.4, 17. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\nUse a trailing semi-colon to eliminate the text.\n\nhist(r2);\n\n\n\n\n\n\n\n\n\n\nExercise 5.6\nGenerate and print a matrix (2D array) of random normals of shape \\(2 \\times 3\\).\nHint: np.random.randn(m, n) samples from the standard normal distribution and generates an m by n matrix.\n\nx = np.random.randn(2, 3)\n\n\nx\n\narray([[ 1.27215403, -0.09185841, -0.37278817],\n       [ 0.15453746,  0.96258071, -0.8547112 ]])\n\n\n\n\nExercise 5.7\nMultiply the matrix you just created by \\(2\\).\nIn linear algebra, this is called “scaling” the matrix.\n\nx * 2\n\narray([[ 2.54430807, -0.18371682, -0.74557633],\n       [ 0.30907492,  1.92516141, -1.70942241]])\n\n\n\n\nExercise 5.8\nNow add the matrix to itself.\n\nx + x\n\narray([[ 2.54430807, -0.18371682, -0.74557633],\n       [ 0.30907492,  1.92516141, -1.70942241]])\n\n\n\n\nExercise 5.9\nNow get a matrix of reciprocals.\nNote: this is not the same as a reciprocal of a matrix.\n\n1 / x\n\narray([[  0.78606833, -10.88631924,  -2.68248858],\n       [  6.47092302,   1.03887393,  -1.16998583]])\n\n\n\n# np.linalg.inv(x) # This is used to get the reciprocal, or inverse, of a matrix\n\n\n\nExercise 5.10\nCreate two two-dimensional arrays.\nOne of \\(0\\)s and one of \\(1\\)s.\nBoth of shape \\(2 \\times 4\\).\n\nmy_shape = (2, 4)\n\n\nz1 = np.zeros(my_shape)\n\n\nz1\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\n\no1 = np.ones(my_shape)\n\n\no1\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\n\n\nExercise 5.11\nCreate an identity matrix with \\(4\\) rows and columns.\n\nnp.identity(4)\n\narray([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.]])\n\n\nNote that identity matrices are square.\n\n\nExercise 5.12\nGenerate a vector of random numbers of length \\(5\\).\nThen print a slice that consists of \\(3\\) elements, beginning with the second element.\nThen print a slice that excludes the first and last elements.\n\nx12 = np.random.randn(5)\n\n\nx12\n\narray([-0.20266496,  0.19059664, -0.41064497, -0.3492225 ,  0.14831958])\n\n\n\nx12[1:4]\n\narray([ 0.19059664, -0.41064497, -0.3492225 ])\n\n\n\nx12[1:-1]\n\narray([ 0.19059664, -0.41064497, -0.3492225 ])\n\n\n\n\nExercise 5.13\nFrom the last array you created, select all elements \\(&gt; 0.15\\).\nWhat is it called when you filter an array in this manner?\nThat is, using truth values in the indexer.\n\nx12[x12 &gt; 0.15]\n\narray([0.19059664])\n\n\nThis is called ‘boolean indexing’.\nConsider the boolean array:\n\nbool_idx = x12 &gt; .15\n\n\nbool_idx\n\narray([False,  True, False, False, False])\n\n\nAnd this is our original array:\n\nx12\n\narray([-0.20266496,  0.19059664, -0.41064497, -0.3492225 ,  0.14831958])\n\n\nSo, boolean indexing is something like:\n\n[a for a, b in zip(x12, bool_idx) if b]\n\n[0.19059663613877315]\n\n\nOr:\n\n[x for x in x12 * bool_idx if x]\n\n[0.19059663613877315]\n\n\n\n\nExercise 5.14\nGenerate a 2D array of random numbers with a shape of \\(3 \\times 3\\).\nThen, select the all the rows but the first, and all the columns but the last.\n\nx14 = np.random.randn(3,3)\n\n\nx14\n\narray([[-0.71092828, -0.45263172, -1.60650309],\n       [-0.15522386, -0.75890669,  1.55023292],\n       [-1.18031566,  0.70695363,  0.08966593]])\n\n\n\nx14[1:, :-1]\n\narray([[-0.15522386, -0.75890669],\n       [-1.18031566,  0.70695363]])\n\n\n\nx14[1:, :2]\n\narray([[-0.15522386, -0.75890669],\n       [-1.18031566,  0.70695363]])\n\n\n\n\nExercise 5.15\nWrite code to generate a new array based on the previous array and which sets all negative values to 0.\nThe second array should be based on a copy of the first.\nThen print both arrays.\n\nx15 = x14.copy()\nx15[x15 &lt; 0] = 0\n\n\nx14\n\narray([[-0.71092828, -0.45263172, -1.60650309],\n       [-0.15522386, -0.75890669,  1.55023292],\n       [-1.18031566,  0.70695363,  0.08966593]])\n\n\n\nx15\n\narray([[0.        , 0.        , 0.        ],\n       [0.        , 0.        , 1.55023292],\n       [0.        , 0.70695363, 0.08966593]])\n\n\n\n\nExercise 5.16\nWrite a function called roll_dice() that returns a sorted 1D list of integers of length n for a die of m sides.\n\nEach integer is from \\(1\\) to \\(m\\) inclusive.\nMake the default value of m \\(6\\).\nGive the user the option to return the results in reverse sort order. Set the default value to False.\nReturn the results as a list.\n\nThen * Run it so that it rolls a \\(6\\)-sided die \\(10\\) times. Print results with reverse sorting. * Run it so that it rolls a \\(12\\)-sided die \\(10\\) times. Print results with no sorting.\n\ndef roll_dice(n, m=6, sort=False, reverse=False):\n    ''' \n    This function returns a sorted list of integers of length n. \n    Each integer is from 1 to 6 inclusive. \n    '''\n    x = np.random.randint(1, m+1, n)\n\n    if sort:\n        return sorted(x, reverse=reverse)\n    else:\n        return list(x)\n\n\ngame1 = roll_dice(10, sort=True, reverse=True)\n\n\ngame1\n\n[6, 5, 4, 4, 3, 3, 2, 1, 1, 1]\n\n\n\ngame2 = roll_dice(10, 12)\n\n\ngame2\n\n[7, 6, 5, 11, 4, 3, 10, 3, 11, 1]\n\n\n\n\nExercise 5.17\nMake a plot showing an example play where where \\(m = 50\\), \\(n = 8\\), and sorting is turned off.\n\nfrom matplotlib.pyplot import plot\n\n\nplot(roll_dice(8, 50));\n\n\n\n\n\n\n\n\n\n\nExercise 5.18\nWrite a NumPy program to compute the eigenvalues and eigenvectors of a given square array.\n\nm = np.mat(\"3 -2;1 0\")\nprint(m)\n\n[[ 3 -2]\n [ 1  0]]\n\n\n\nw, v = np.linalg.eig(m) \nprint( \"Eigenvalues:\",w)\nprint( \"Eigenvectors:\",v)\n\nEigenvalues: [2. 1.]\nEigenvectors: [[0.89442719 0.70710678]\n [0.4472136  0.70710678]]\n\n\n\n\nExercise 5.19\nCreate two 2D matrices \\(p\\) and \\(q\\) by hand, each of shape \\(2 \\times 2\\).\nThen multiply them.\n\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\n\n\nprint('p:', p)\nprint('q:', q)\n\np: [[1, 0], [0, 1]]\nq: [[1, 2], [3, 4]]\n\n\n\nresult1 = np.dot(p, q)\nprint(result1)\n\n[[1 2]\n [3 4]]\n\n\n\nresult2 = np.dot(q, p)\nprint(result2)\n\n[[1 2]\n [3 4]]\n\n\n\n\nExercise 5.20\nUse NumPy to calculate the difference between the maximum and the minimum values of a given array along the second axis.\nExpected Output:\nOriginal array:\n[\n    [0, 1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10, 11]\n]\nDifference between the maximum and the minimum values of the said array:\n[5, 5]\n\nx = np.arange(12).reshape((2, 6))\nprint(x.shape)\nprint(x)\n\n(2, 6)\n[[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]]\n\n\nHere are max and min along the first axis (cols)\n\nnp.amax(x, axis=0), np.amin(x, axis=0)\n\n(array([ 6,  7,  8,  9, 10, 11]), array([0, 1, 2, 3, 4, 5]))\n\n\nHere are max and min along the second axis (rows)\n\nnp.amax(x, axis=1), np.amin(x, axis=1)\n\n(array([ 5, 11]), array([0, 6]))\n\n\n\nr1 = np.amax(x, axis=1) - np.amin(x, axis=1)\nprint(r1)\n\n[5 5]\n\n\n\nr2 = np.ptp(x, axis=1)\nprint(r2)\n\n[5 5]\n\n\n\nnp.allclose(r1, r2) \n\nTrue\n\n\n\n\nExercise 5.21\nUse NumPy to sort a given array by the 2nd column.\nOriginal array:\n[\n    [1, 5, 0],\n    [3, 2, 5],\n    [8, 7, 6]\n]\nSorted array:\n[\n    [3, 2, 5],\n    [1, 5, 0],\n    [8, 7, 6]\n]\n\nnums = np.random.randint(0,10,(3,3))\nprint(nums)\n\n[[7 0 1]\n [6 9 0]\n [6 3 0]]\n\n\n\nprint(nums[nums[:,1].argsort()])\n\n[[7 0 1]\n [6 3 0]\n [6 9 0]]\n\n\n\n\nExercise 5.22\nUse NumPy to find the norm of a matrix or vector.\n\nv = np.arange(7)\nvnorm = np.linalg.norm(v)\nprint(v)\nprint(\"Vector norm:\", vnorm)\n\n[0 1 2 3 4 5 6]\nVector norm: 9.539392014169456\n\n\n\nm = np.matrix('1, 2; 3, 4') \nmnorm = np.linalg.norm(m)\nprint(m)\nprint(\"Matrix norm:\", mnorm)\n\n[[1 2]\n [3 4]]\nMatrix norm: 5.477225575051661\n\n\n\nnp.linalg.norm?\n\n\nSignature: np.linalg.norm(x, ord=None, axis=None, keepdims=False)\nDocstring:\nMatrix or vector norm.\nThis function is able to return one of eight different matrix norms,\nor one of an infinite number of vector norms (described below), depending\non the value of the ``ord`` parameter.\nParameters\n----------\nx : array_like\n    Input array.  If `axis` is None, `x` must be 1-D or 2-D, unless `ord`\n    is None. If both `axis` and `ord` are None, the 2-norm of\n    ``x.ravel`` will be returned.\nord : {non-zero int, inf, -inf, 'fro', 'nuc'}, optional\n    Order of the norm (see table under ``Notes``). inf means numpy's\n    `inf` object. The default is None.\naxis : {None, int, 2-tuple of ints}, optional.\n    If `axis` is an integer, it specifies the axis of `x` along which to\n    compute the vector norms.  If `axis` is a 2-tuple, it specifies the\n    axes that hold 2-D matrices, and the matrix norms of these matrices\n    are computed.  If `axis` is None then either a vector norm (when `x`\n    is 1-D) or a matrix norm (when `x` is 2-D) is returned. The default\n    is None.\n    .. versionadded:: 1.8.0\nkeepdims : bool, optional\n    If this is set to True, the axes which are normed over are left in the\n    result as dimensions with size one.  With this option the result will\n    broadcast correctly against the original `x`.\n    .. versionadded:: 1.10.0\nReturns\n-------\nn : float or ndarray\n    Norm of the matrix or vector(s).\nSee Also\n--------\nscipy.linalg.norm : Similar function in SciPy.\nNotes\n-----\nFor values of ``ord &lt; 1``, the result is, strictly speaking, not a\nmathematical 'norm', but it may still be useful for various numerical\npurposes.\nThe following norms can be calculated:\n=====  ============================  ==========================\nord    norm for matrices             norm for vectors\n=====  ============================  ==========================\nNone   Frobenius norm                2-norm\n'fro'  Frobenius norm                --\n'nuc'  nuclear norm                  --\ninf    max(sum(abs(x), axis=1))      max(abs(x))\n-inf   min(sum(abs(x), axis=1))      min(abs(x))\n0      --                            sum(x != 0)\n1      max(sum(abs(x), axis=0))      as below\n-1     min(sum(abs(x), axis=0))      as below\n2      2-norm (largest sing. value)  as below\n-2     smallest singular value       as below\nother  --                            sum(abs(x)**ord)**(1./ord)\n=====  ============================  ==========================\nThe Frobenius norm is given by [1]_:\n    :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\nThe nuclear norm is the sum of the singular values.\nBoth the Frobenius and nuclear norm orders are only defined for\nmatrices and raise a ValueError when ``x.ndim != 2``.\nReferences\n----------\n.. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n       Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\nExamples\n--------\n&gt;&gt;&gt; from numpy import linalg as LA\n&gt;&gt;&gt; a = np.arange(9) - 4\n&gt;&gt;&gt; a\narray([-4, -3, -2, ...,  2,  3,  4])\n&gt;&gt;&gt; b = a.reshape((3, 3))\n&gt;&gt;&gt; b\narray([[-4, -3, -2],\n       [-1,  0,  1],\n       [ 2,  3,  4]])\n&gt;&gt;&gt; LA.norm(a)\n7.745966692414834\n&gt;&gt;&gt; LA.norm(b)\n7.745966692414834\n&gt;&gt;&gt; LA.norm(b, 'fro')\n7.745966692414834\n&gt;&gt;&gt; LA.norm(a, np.inf)\n4.0\n&gt;&gt;&gt; LA.norm(b, np.inf)\n9.0\n&gt;&gt;&gt; LA.norm(a, -np.inf)\n0.0\n&gt;&gt;&gt; LA.norm(b, -np.inf)\n2.0\n&gt;&gt;&gt; LA.norm(a, 1)\n20.0\n&gt;&gt;&gt; LA.norm(b, 1)\n7.0\n&gt;&gt;&gt; LA.norm(a, -1)\n-4.6566128774142013e-010\n&gt;&gt;&gt; LA.norm(b, -1)\n6.0\n&gt;&gt;&gt; LA.norm(a, 2)\n7.745966692414834\n&gt;&gt;&gt; LA.norm(b, 2)\n7.3484692283495345\n&gt;&gt;&gt; LA.norm(a, -2)\n0.0\n&gt;&gt;&gt; LA.norm(b, -2)\n1.8570331885190563e-016 # may vary\n&gt;&gt;&gt; LA.norm(a, 3)\n5.8480354764257312 # may vary\n&gt;&gt;&gt; LA.norm(a, -3)\n0.0\nUsing the `axis` argument to compute vector norms:\n&gt;&gt;&gt; c = np.array([[ 1, 2, 3],\n...               [-1, 1, 4]])\n&gt;&gt;&gt; LA.norm(c, axis=0)\narray([ 1.41421356,  2.23606798,  5.        ])\n&gt;&gt;&gt; LA.norm(c, axis=1)\narray([ 3.74165739,  4.24264069])\n&gt;&gt;&gt; LA.norm(c, ord=1, axis=1)\narray([ 6.,  6.])\nUsing the `axis` argument to compute matrix norms:\n&gt;&gt;&gt; m = np.arange(8).reshape(2,2,2)\n&gt;&gt;&gt; LA.norm(m, axis=(1,2))\narray([  3.74165739,  11.22497216])\n&gt;&gt;&gt; LA.norm(m[0, :, :]), LA.norm(m[1, :, :])\n(3.7416573867739413, 11.224972160321824)\nFile:      /apps/software/standard/core/jupyterlab/3.6.3-py3.11/lib/python3.11/site-packages/numpy/linalg/linalg.py\nType:      function\n\n\n\n\n\nExercise 5.23\nUse NumPy to calculate the QR decomposition of a given matrix.\n\nm = np.array([[1,2],[3,4]])\nprint(m)\n\n[[1 2]\n [3 4]]\n\n\n\nresult =  np.linalg.qr(m)\nprint(result)\n\n(array([[-0.31622777, -0.9486833 ],\n       [-0.9486833 ,  0.31622777]]), array([[-3.16227766, -4.42718872],\n       [ 0.        , -0.63245553]]))"
  },
  {
    "objectID": "exercises/M05-Notes.html",
    "href": "exercises/M05-Notes.html",
    "title": "M05 Notes",
    "section": "",
    "text": "Type Checking\nThe function type() does not return a string value, so you can’t test for a type in this way:\n\nx = \"foo\"\n\n\ntype(x) == 'str'\n\nFalse\n\n\nThe return value of type() is not a string:\n\ntype(x)\n\nstr\n\n\nWe can see that this is not a string by doing this:\n\ntype(type(x))\n\ntype\n\n\nSo, you can compare the return value with one of Python’s built-in data type objects:\n\ntype(x) == str\n\nTrue\n\n\nPythons built-in data types include str, float, int, and bool.\nWhy use isinstance()?\nFor one thing, you can compare a value to multiple data types at once:\n\nx1 = .1\n\nisinstance(x1, int), isinstance(x1, float), isinstance(x1, (float, int))\n\n(False, True, True)\n\n\n\n\nPoints\n\nNumPy introduces a new data structure and new data types.\nPandas is built on top of NumPy.\nNumPy is foundational to the Python data science toolbox – SciPy, SciKit Learn, etc.\n\n\n\nShape\n\nimport numpy as np\n\n\na = np.ones((4,4))\n\n\na\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\nOne column matrix\n\na[[0]]\n\narray([[1., 1., 1., 1.]])\n\n\n\na[[0]].shape\n\n(1, 4)\n\n\nVector\n\na[0]\n\narray([1., 1., 1., 1.])\n\n\n\na[0].shape\n\n(4,)"
  },
  {
    "objectID": "lab_and_exercises.html",
    "href": "lab_and_exercises.html",
    "title": "My Notenook",
    "section": "",
    "text": "my_list = [1, 2, 3]\n\n\nmy_list\n\n[1, 2, 3]\n\n\n\ntype(my_list)\n\nlist\n\n\n\nNext Task\n\nmy_string = 'abcdefghi'\nmy_string[:3]\n\n'abc'\n\n\n\nmy_string[-3:]\n\n'ghi'\n\n\n\nmy_list = [1, 2, 3]\nmy_list[1]\n\n2\n\n\n\n\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\n# I think there was one more question but I didn't quite catch it since I was trying to troubleshoot the above\n\n\nprint(\"Hello World!\") # from the lab portion of today\n\nHello World!"
  },
  {
    "objectID": "hw_keys/M06-HW-KEY.html",
    "href": "hw_keys/M06-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:  DS 5100\nModule:  06 Pandas\nTopic:   HW Myocardial Infarction Analytics with Pandas\nAuthor:  R.C. Alvarado (adapted)\nDate:    7 July 2023"
  },
  {
    "objectID": "hw_keys/M06-HW-KEY.html#task-1",
    "href": "hw_keys/M06-HW-KEY.html#task-1",
    "title": "Metadata",
    "section": "Task 1",
    "text": "Task 1\n(1 PT)\nImport the data into a dataframe and then print the number of records in the dataset\n\n# CODE HERE\n\n\ndf = pd.read_csv(path_to_data, header=None)\n\n\nlen(df)\n\n1700"
  },
  {
    "objectID": "hw_keys/M06-HW-KEY.html#task-2",
    "href": "hw_keys/M06-HW-KEY.html#task-2",
    "title": "Metadata",
    "section": "Task 2",
    "text": "Task 2\n(1 PT)\nShow the first three records in the dataset\n\n# CODE HERE\n\n\ndf.iloc[:3]\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\n\n\n0\n1\n77\n1\n2\n1\n1\n2\n?\n3\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n2\n55\n1\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n3\n52\n1\n0\n0\n0\n2\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n3 rows × 124 columns"
  },
  {
    "objectID": "hw_keys/M06-HW-KEY.html#task-3",
    "href": "hw_keys/M06-HW-KEY.html#task-3",
    "title": "Metadata",
    "section": "Task 3",
    "text": "Task 3\n(1 PT)\nOne complication: missing values are filled with ? which will cause problems (e.g., stats can’t be computed easily).\nCount the number of records in df[1] containing ?.\n\n# CODE HERE\n\n\ndf\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\n\n\n0\n1\n77\n1\n2\n1\n1\n2\n?\n3\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n2\n55\n1\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n3\n52\n1\n0\n0\n0\n2\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n4\n68\n0\n0\n0\n0\n2\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n4\n5\n60\n1\n0\n0\n0\n2\n?\n3\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1695\n1696\n77\n0\n0\n4\n2\n1\n?\n2\n0\n...\n0\n0\n1\n0\n1\n0\n0\n0\n0\n3\n\n\n1696\n1697\n70\n0\n0\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n1697\n1698\n55\n1\n3\n6\n2\n2\n?\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n1\n0\n6\n\n\n1698\n1699\n79\n0\n2\n2\n2\n1\n?\n2\n0\n...\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n\n\n1699\n1700\n63\n1\n2\n?\n?\n?\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n\n\n1700 rows × 124 columns\n\n\n\n\n\nlen(df.loc[df[1] == '?', 1])\n\n8\n\n\n\n# df.iloc[:, 1].str.count(r'\\?').sum()\n\n\n# df[1].str.count(r'\\?').sum()"
  },
  {
    "objectID": "hw_keys/M06-HW-KEY.html#task-4",
    "href": "hw_keys/M06-HW-KEY.html#task-4",
    "title": "Metadata",
    "section": "Task 4",
    "text": "Task 4\n(1 PT)\nReplace '?' with np.nan in the age column.\n\n# CODE HERE\n\n\ndf.loc[df[1] == '?', 1] = np.nan"
  },
  {
    "objectID": "hw_keys/M06-HW-KEY.html#task-5",
    "href": "hw_keys/M06-HW-KEY.html#task-5",
    "title": "Metadata",
    "section": "Task 5",
    "text": "Task 5\n(1 PT)\nPrint the number of records containing np.nan in the column df[1] of your dataframe.\n\n# CODE HERE\n\n\ndf[df[1].isna()]\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\n\n\n70\n71\nNaN\n1\n0\n3\n2\n2\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n103\n104\nNaN\n1\n0\n3\n2\n2\n?\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n484\n485\nNaN\n0\n2\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1200\n1201\nNaN\n1\n0\n0\n0\n0\n?\n0\n0\n...\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n1291\n1292\nNaN\n0\n0\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1303\n1304\nNaN\n1\n1\n3\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n1359\n1360\nNaN\n1\n0\n0\n0\n0\n?\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1390\n1391\nNaN\n1\n2\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n\n\n8 rows × 124 columns\n\n\n\n\n\ndf[df[1].isna()]\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\n\n\n70\n71\nNaN\n1\n0\n3\n2\n2\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n103\n104\nNaN\n1\n0\n3\n2\n2\n?\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n484\n485\nNaN\n0\n2\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1200\n1201\nNaN\n1\n0\n0\n0\n0\n?\n0\n0\n...\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n1291\n1292\nNaN\n0\n0\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1303\n1304\nNaN\n1\n1\n3\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n1359\n1360\nNaN\n1\n0\n0\n0\n0\n?\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1390\n1391\nNaN\n1\n2\n6\n2\n1\n?\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n\n\n8 rows × 124 columns\n\n\n\n\n\ndf[df[1].isna()].shape[0]\n\n8"
  },
  {
    "objectID": "hw_keys/M05-HW-KEY.html",
    "href": "hw_keys/M05-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:   DS 5100\nModule:   05 Numpy HW\nTopic:    Capital Asset Pricing Model (CAPM)\nAuthor:   R.C. Alvarado (revised)\nDate:     7 July 2023\n\nStudent Info\n\nName:\nNet ID:\nURL of this file in GitHub:\n\n\n\nInstructions\nIn your private course repo on Rivanna, use this Jupyter notebook and the provided data file capm_market_data.csv to write code that performs the tasks below.\nSave your notebook in the M05 directory.\nRemember to add and commit these files to your repo.\nThen push your commits to your repo on GitHib.\nBe sure to fill out the Student Info block above.\nTo submit your homework, save the notebook as a PDF and upload it to GradeScope, following the instructions.\nTOTAL POINTS: 10\n\n\nOverview\n\nIn finance, a capital asset pricing model (CAPM) is a single-factor regression model used to explain and predict excess stock returns.\nThere are better, more accurate models, but CAPM has its uses.\nFor example, the market beta \\(\\beta_i\\) is a useful output.\nHere is the formula for calculating the expected excess return:\n\\(E[R_i] - R_f  = \\beta_i ( E[R_m] - R_f )\\)\nwhere:\n\n\\(E[R_i]\\): expected return of stock \\(i\\)\n\\(R_f\\): risk-free rate\n\\(\\beta_i\\): market beta of the stock\n\\(E[R_m] - R_f\\): market risk premium\n\nReview the instructions below to complete the requested tasks.\nTOTAL POINTS: 10\n\n\nSetting Up\nImport NumPy\n\nimport numpy as np\n\nDefine Risk-free Treasury rate. You will use this constant below.\n\nR_f = 0.0175 / 252\n\n\nR_f\n\n6.944444444444444e-05\n\n\n\n\nPrepare the Data\nWe import the data and convert it into usable Numby arrays.\nRead in the market data\nThe values are closing prices, adjusted for splits and dividends.\nThe prefixes of the second two columns are based on the following codes: * SPY is an ETF for the S&P 500 (i.e. the stock market as whole) * AAPL stands for Apple\n\ndata_file = \"capm_market_data.csv\"\n\n\ndata_2D = np.array([row.strip().split(',') for row in open(data_file, 'r').readlines()])\n\n\ndata_2D.shape\n\n(136, 3)\n\n\n\n# data_2D\n\nSeparete columns from the data\n\nCOLS = np.str_(data_2D[0])\n\n\nCOLS\n\n\"['date' 'spy_adj_close' 'aapl_adj_close']\"\n\n\nSeparate columns by data types\nNumpy wants everything to in a data structure to be of the same type.\n\nDATES = data_2D[1:, 0]\n\n\n# DATES\n\n\nRETURNS = data_2D[1:, 1:].astype('float')\n\n\n# RETURNS\n\n\n\nTask 1\n(1 PT)\nPrint the first 5 rows of the RETURNS table.\n\n# PRINT ROWS\n\n\nRETURNS[:5]\n\narray([[321.55578613, 298.82995605],\n       [319.12091064, 295.92471313],\n       [320.33837891, 298.28271484],\n       [319.43765259, 296.87988281],\n       [321.1401062 , 301.6555481 ]])\n\n\n\n\nTask 2\n(1 PT)\nPrint the first five values from the SPY column in RETURNS.\nThen do the same for the AAPL column.\nUse one cell for each operation.\n\n# PRINT VALUES FOR SPY\n\n\n# RETURNS\n\n\nRETURNS[:5, 0]\n\narray([321.55578613, 319.12091064, 320.33837891, 319.43765259,\n       321.1401062 ])\n\n\n\n# PRINT VALUES FOR AAPL\n\n\nRETURNS[:5, 1]\n\narray([298.82995605, 295.92471313, 298.28271484, 296.87988281,\n       301.6555481 ])\n\n\n\n\nTask 3\n(1 PT)\nCompute the excess returns by subtracting the constant R_f from RETURNS.\nSave the result as numpy 2D array (i.e. a table) named EXCESS.\nPrint the LAST five rows from the new table.\n\n# COMPUTE EXCESS\n\n\n# RETURNS - R_f \n\n\n# RETURNS - (RETURNS * R_f)\n\n\nEXCESS = RETURNS - R_f\n\n\n# EXCESS = RETURNS - (RETURNS * R_f)\n\n\n# PRINT ROWS\n\n\nEXCESS[-5:]\n\narray([[314.37993544, 383.00994032],\n       [317.58992689, 383.67992323],\n       [314.83992689, 381.90993422],\n       [318.91994398, 388.22994154],\n       [321.84993666, 390.89992445]])\n\n\n\n\nTask 4\n(1 PT)\nMake a simple scatterplot using Matplotlib with SPY excess returns on the x-axis, AAPL excess returns on the y-axis.\nHint: Use the following code:\nfrom matplotlib.pyplot import scatter\n\nscatter(&lt;x&gt;, &lt;y&gt;)\nReplace &lt;x&gt; and &lt;y&gt; with the appropriate vectors.\nYou may want to save the vectors for the SPY and AAPL columns as x and y respectively. This will make it visually easier to perform Task 6.\n\n# ENTER CODE\n\n\nfrom matplotlib.pyplot import scatter\n\nx = EXCESS[:, 0]\ny = EXCESS[:, 1]\n\nscatter(x, y);\n\n\n\n\n\n\n\n\n\n\nTaks 5\n(3 PTS)\nUse the normal equation, listed below, to compute the Regression Coefficient Estimate of the data plotted above, \\(\\hat\\beta_i\\).\nNote that \\(x^T\\) denotes the transpose of \\(x\\).\n\\(\\begin{aligned} \\hat\\beta_i=(x^Tx)^{−1}x^Ty \\end{aligned}\\)\nUse the Numpy functions for matrix to do this — multiplication, transpose, and inverse.\nNote, however, that since \\(x\\) in this case a single column matrix, i.e. a vector, the result of \\(x'x\\) will be a scalar,\nwhich is not invertable. So you can just invert the result by division, i.e. \n\\(\\hat\\beta_i = \\large\\frac{1}{x^Tx} \\small(x^Ty)\\)\nBe sure to review what these operations do, and how they work, if you’re a bit rusty.\nYou should find that \\(\\hat\\beta_i &gt; 1\\).\nThis means that the risk of AAPL stock, given the data, and according to this particular (flawed) model, is higher relative to the risk of the S&P 500.\n\n# ENTER CODE\n\n\n# This would work id x were a matrix, but it's a vector, so the result is a scalar, which can't be inverted\n\n\n# RETURNS[:, 0]\n\n\n# RETURNS[:,[0]] \n\n\nx.shape\n\n(135,)\n\n\n\nx1 = x.reshape(-1,1)\n\n\nx1.shape\n\n(135, 1)\n\n\n\nbeta = np.dot(np.linalg.inv(np.dot(x1.T, x1)), np.dot(x1.T, y))[0]\n\n\n# This works in the case where x is a scalar\n# beta = np.dot(1/(np.dot(x.T, x)), np.dot(x.T, y))\n\n\n# So do this\nbeta = (1 / x.T.dot(x)) * (x.T.dot(y))\n\n\nround(beta, 4)\n\n1.03\n\n\n\n# Another way\n\n\nxm = x.reshape((-1,1))\nbeta2 = (np.linalg.inv(xm.T.dot(xm)) * x.T.dot(y))[0, 0]\n\n\nround(beta2, 4)\n\n1.03\n\n\n\n\nTask 6\n(3 PTS)\nMeasuring Beta Sensitivity to Dropping Observations (Jackknifing)\nLet’s understand how sensitive the beta is to each data point.\nWe want to drop each data point (one at a time), compute \\(_i\\) using our formula from above, and save each measurement.\nWrite a function called beta_sensitivity() with these specs:\n\nTake numpy arrays x and y as inputs.\nFor each observation i, compute the beta without the current observation. You can use a lambda function for this.\nReturn a list of tuples each containing the observation row dropped and the beta estimate, i.e. something like (i, beta_est), depending how you’ve named your variables.\n\nHint: np.delete(x, i) will delete observation i from array x.\nCall beta_sensitivity() and print the first five tuples of output.\n\n# ENTER FUNCTION\n\n\n# CALL FUNCTION\n\n\n# READ DATA\n\n\nSolution 1\n\nget_beta = lambda x, y: (1 / x.T.dot(x)) * (x.T.dot(y))\n\n\nget_beta(x, y)\n\n1.029980294240815\n\n\n\n# zip?\n\n\ndef beta_sensitivity(x, y):\n    beta_data = []\n    for i in range(len(x)):\n        x_tmp = np.delete(x, i)\n        y_tmp = np.delete(y, i)\n        beta_data.append((i, get_beta(x_tmp, y_tmp)))\n    return beta_data\n\n\n# x.shape\n\n\nbeta_data = beta_sensitivity(x, y)\n\n\nbeta_data[:5]\n\n[(0, 1.030847730172396),\n (1, 1.0308516176393125),\n (2, 1.0308255236222597),\n (3, 1.0308357542837523),\n (4, 1.030759501843587)]\n\n\n\n\nSolution 2\n\ndef beta_sensitivity2(X):\n    beta_data = []\n    for i in range(len(X)):\n        X1 = np.delete(X, i, 0)\n        beta_data.append((i, get_beta(X1[:, 0], X1[:, 1])))\n    return beta_data\n\n\nbeta_data2 = beta_sensitivity2(EXCESS)\n\n\nbeta_data2[:5]\n\n[(0, 1.030847730172396),\n (1, 1.0308516176393125),\n (2, 1.0308255236222599),\n (3, 1.0308357542837525),\n (4, 1.030759501843587)]\n\n\n\n\nSolution 3\n\nget_beta3 = lambda X: (np.linalg.inv(X[:, :-1].T.dot(X[:, :-1]))) * (X[:, :-1].T.dot(X[:, -1]))\nbeta_sensitivity3 = lambda X: [(i, get_beta3(np.delete(X, i, 0))[0, 0]) for i in range(len(X))]\n\n\nbeta_data3 = beta_sensitivity3(EXCESS)\n\n\nbeta_data3[:5]\n\n[(0, 1.030847730172396),\n (1, 1.0308516176393125),\n (2, 1.0308255236222599),\n (3, 1.0308357542837525),\n (4, 1.030759501843587)]"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html",
    "href": "hw_keys/M04-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:  DS 5100\nModule:  04 Functions HW\nTitle:   Fighting Forest Fires with Functions\nAuthor:  R.C. Alvarado (adapted)\nDatae:   7 July 2023"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#convert-csv-into-datafame-like-data-structure",
    "href": "hw_keys/M04-HW-KEY.html#convert-csv-into-datafame-like-data-structure",
    "title": "Metadata",
    "section": "Convert CSV into Datafame-like Data Structure",
    "text": "Convert CSV into Datafame-like Data Structure\nWe use a helper function to convert the data into the form of a dataframe-like dictionary.\nThat is, we convert a list of rows into a dictionary of columns, each cast to the appropriate data type.\nLater, we will use Pandas and R dataframes to do this work.\nFirst, we define the data types by inspecting the data and creating a dictionary of lambda functions to do our casting.\n\ndtypes = ['i', 'i', 's', 's', 'f', 'f', 'f', 'f', 'f', 'i', 'f', 'f', 'f']\n# dtypes = list(\"iissfffffifff\") # We could have done it this way, too\n\ncaster = {\n    'i': lambda x: int(x),\n    's': lambda x: str(x),\n    'f': lambda x: float(x)\n}\n\nNext, we grab the column names from the first row or list.\nNote that .strip() is a string function that removes extra whitespace from before and after a string.\n\ncols = data_file[0].strip().split(',')\n\nFinally, we iterate through the list of rows and flip them into a dictionary of columns.\nThe key of each dictionary element is the columns name, and the value is a list of values with a common data type.\n\n# Get the rows, but not the first, and convert them into lists\nrows = [line.strip().split(',') for line in data_file[1:]]\n\n# Initialize the dataframe by defining a dictionary of lists, with each column name as a key\nfiredata = {col:[] for col in cols}\n\n# Iterate through the rows and convert them to columns \nfor row in rows:\n    for j, col in enumerate(row):\n        firedata[cols[j]].append(caster[dtypes[j]](col))\n\nTest to see if it worked …\n\nfiredata['Y'][:5]\n\n[5, 4, 4, 6, 6]"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-1",
    "href": "hw_keys/M04-HW-KEY.html#task-1",
    "title": "Metadata",
    "section": "Task 1",
    "text": "Task 1\n(2 points)\nWrite a function called coord_builder() with these requirements:\n\nTakes two lists, X and Y, as inputs. X and Y must be of equal length.\nReturns a list of tuples [(x1,y1), (x2,y2), ..., (xn,yn)] where (xi,yi) are the ordered pairs from X and Y.\nUses the zip() function to create the returned list.\nUse a list comprehension to actually build the returned list.\nContains a docstring with short description of the function.\n\n\ndef coord_builder(A, B):\n    \"\"\"\n    Create an row-wise list of tuples for each pair in two lists.\n    \"\"\"\n\n    # Simple error checking\n    if len(A) != len(B):\n        print(\"Lists must be of equal length.\")\n        return False\n    \n    # Combine elements\n    zippy = [(a, b) for a, b in zip(X,Y)]\n    \n    return zippy"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-2",
    "href": "hw_keys/M04-HW-KEY.html#task-2",
    "title": "Metadata",
    "section": "Task 2",
    "text": "Task 2\n(1 PT)\nCall your coord_builder() function, passing in X and Y.\nThen print the first ten tuples.\n\nxy_coords = coord_builder(X, Y)\n\n\nprint(xy_coords[:10])\n\n[(7, 5), (7, 4), (7, 4), (8, 6), (8, 6), (8, 6), (8, 6), (8, 6), (8, 6), (7, 5)]"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-3",
    "href": "hw_keys/M04-HW-KEY.html#task-3",
    "title": "Metadata",
    "section": "Task 3",
    "text": "Task 3\n(1 PT)\nWrite code to print the minimum area and maximum area in a tuple (min_value, max_value).\nSave min_value and max_value as floats.\n\nmin_area = min(area)\nmax_area = max(area)\n\n\nprint((min_area, max_area))\n\n(0.0, 1090.84)"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-4",
    "href": "hw_keys/M04-HW-KEY.html#task-4",
    "title": "Metadata",
    "section": "Task 4",
    "text": "Task 4\n(2 PTS)\nWrite a lambda function that applies the following function to \\(x\\):\n\n\\(log_{10}(1 + x)\\)\n\nReturn the rounded value to \\(2\\) decimals.\nAssign the function to the variable mylog10.\nThen call the lambda function on list create from the area column from firedata and print the last 10 values.\nHints: * Use the log10 function from Python’s math module. You’ll need to import it. * Use a list comprehension to make the lambda function a one-liner. * To get the last members of a list, used negative offset slicing. See the Python documentation on lists for a refresher on slicing.\n\nfrom math import log10\n\n\nmylog10 = lambda x: round(log10(1 + x), 2)\n\n\nfor x in area[-10:]:\n    print(mylog10(x))\n\n0.0\n0.0\n0.5\n0.16\n0.0\n0.87\n1.74\n1.08\n0.0\n0.0\n\n\n\n_ = [print(mylog10(x)) for x in area[-10:]]\n\n0.0\n0.0\n0.5\n0.16\n0.0\n0.87\n1.74\n1.08\n0.0\n0.0"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-5",
    "href": "hw_keys/M04-HW-KEY.html#task-5",
    "title": "Metadata",
    "section": "Task 5",
    "text": "Task 5\n(1 PT)\nCreate a function called get_uniques() that extracts the unique values from a list. * Do not use set() but instead use a dictionary comprehension to capture the unique names. * Hint: They keys in a dictionary are unique. * Hint: You do not need to count how many times a name appears in the source list.\nThen function should optionally return the list as sorted in ascending order.\nThen apply it to the month column of our data with sorting turned on.\nThen print the unique months.\n\ndef get_uniques(A, sort=True):\n    uniques = {x:True for x in A}.keys()\n    if sort: uniques = sorted(uniques)\n    return uniques\n\n\nmonth_names = get_uniques(month)\n\n\nprint(month_names, True)\n\n['apr', 'aug', 'dec', 'feb', 'jan', 'jul', 'jun', 'mar', 'may', 'nov', 'oct', 'sep'] True\n\n\nNOTE: Sorting does not seem to work here …"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-6",
    "href": "hw_keys/M04-HW-KEY.html#task-6",
    "title": "Metadata",
    "section": "Task 6",
    "text": "Task 6\n(1 PT)\nWrite a lambda function called get_month_for_letter that uses a list comprehension to select all months starting with a given letter from the list of unique month names you just crreated.\nThe function should assume that the list of unique month names exists in the global context.\nThe returned list should contain uppercase strings.\nRun and print the result with a as the paramter.\n\nget_month_for_letter = lambda x: [m.upper() for m in month_names if m[0] == x]\n\n\nget_month_for_letter('a')\n\n['APR', 'AUG']"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-7",
    "href": "hw_keys/M04-HW-KEY.html#task-7",
    "title": "Metadata",
    "section": "Task 7",
    "text": "Task 7\n(2 PTS)\nWrite a function called bandpass_filter() with these requirements:\n\nTakes three inputs:\n\nA list of numbers num_list.\nAn integer serving as a lower bound lower_bound.\nAn integer serving as an upper bound upper_bound.\n\nReturns a new array containing only the values from the original array which are greater than lower_bound and less than upper_bound.\n\n\n# WRITE FUNCTION\ndef bandpass_filter(num_list, lower_bound, upper_bound):\n    return [n for n in num_list if n &gt; lower_bound and n &lt; upper_bound]"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-8",
    "href": "hw_keys/M04-HW-KEY.html#task-8",
    "title": "Metadata",
    "section": "Task 8",
    "text": "Task 8\n(1 PT)\nCall bandpass_filter() passing dmc as the list, with lower_bound=25 and upper_bound=35.\nThen print the result.\n\nresult8 = bandpass_filter(dmc, 25, 35)\n\n\nprint(result8)\n\n[26.2, 33.3, 32.8, 27.9, 27.4, 25.7, 33.3, 33.3, 30.7, 33.3, 25.7, 25.7, 25.7, 32.8, 27.2, 27.8, 26.4, 25.4, 25.4, 25.4, 25.4, 26.7, 25.4, 27.5, 28.0, 25.4]"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-9",
    "href": "hw_keys/M04-HW-KEY.html#task-9",
    "title": "Metadata",
    "section": "Task 9",
    "text": "Task 9\n(2 PTS)\nWrite a lambda function get_mean that computes the mean \\(\\mu\\) of a list of numbers. * The mean is jus the sum of a list of numeric values divided by the length of that list.\nWrite another lambda function get_ssd that computes the squared deviation of a number. * The function takes two arguments, a number from a given list and the mean of the numbers in that list. * The function is meant to be used in a for-loop that iterates through a list. * The squared deviation of a list element \\(x_i\\) is \\((x_i - \\mu)^2\\).\nThen write get_sum_sq_err() with these requirements: * Takes a numeric list as input. * Computes the mean \\(\\mu\\) of the list using get_mean. * Computes the sum of squared deviations for the list using a list comprehension that applies get_ssd. * Returns the sum of squared deviations.\n\nget_mean = lambda x: sum(x) / len(x)\n\n\nget_ssd = lambda x, mu: (x - mu)**2\n\n\ndef get_sum_sq_err(num_list):\n    mu = get_mean(num_list)    \n    sum_ssd = sum([get_ssd(x, mu) for x in num_list])    \n    return sum_ssd"
  },
  {
    "objectID": "hw_keys/M04-HW-KEY.html#task-10",
    "href": "hw_keys/M04-HW-KEY.html#task-10",
    "title": "Metadata",
    "section": "Task 10",
    "text": "Task 10\n(1 PT)\nCall sum_sq_err() passing ffmc as the list and print the result.\n\nget_sum_sq_err(ffmc)\n\n15723.357872340412"
  },
  {
    "objectID": "hw_keys/M09-HW.html",
    "href": "hw_keys/M09-HW.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:  DS 5100\nModule:  09 Python Packages\nTopic:   HW Package Booklover\nAuthor:  R.C. Alvarado (adapted)\nDate:    2 July 2024 (revised)"
  },
  {
    "objectID": "hw_keys/M09-HW.html#task-1",
    "href": "hw_keys/M09-HW.html#task-1",
    "title": "Metadata",
    "section": "Task 1",
    "text": "Task 1\n(5 points)\nShow the directory structure of your repo by running this command from the root of your repo.\nNote: You may run this from the command line and cut-and-paste a screenshot of your results here.\n\n!ls -lR\n\ntotal 352\n-rw-r--r--@ 1 rca2t1  staff  15987 Jul  2 13:20 M02-HW-KEY.ipynb\n-rw-r--r--@ 1 rca2t1  staff  13931 Jul  2 13:20 M03-HW-KEY.ipynb\n-rw-r--r--@ 1 rca2t1  staff  21977 Jul  2 13:20 M04-HW-KEY.ipynb\n-rw-r--r--@ 1 rca2t1  staff  46806 Jul  2 13:20 M05-HW-KEY.ipynb\n-rw-r--r--@ 1 rca2t1  staff  64173 Jul  2 13:20 M06-HW-KEY.ipynb\n-rw-r--r--@ 1 rca2t1  staff   5373 Jul  2 13:24 M09-HW.ipynb\n-rw-r--r--@ 1 rca2t1  staff      0 May 10 12:09 readme.txt"
  },
  {
    "objectID": "hw_keys/M09-HW.html#task-2",
    "href": "hw_keys/M09-HW.html#task-2",
    "title": "Metadata",
    "section": "Task 2",
    "text": "Task 2\n(1 point)\nPut the URL of your GitHub repo here. Just paste it into a Markdown cell.\nURL:"
  },
  {
    "objectID": "hw_keys/M09-HW.html#task-3",
    "href": "hw_keys/M09-HW.html#task-3",
    "title": "Metadata",
    "section": "Task 3",
    "text": "Task 3\n(1 point)\nShow the results of installing your package.\n!pip install -e .\nNote: You may run this from the command line and cut-and-paste a screenshot of your results here."
  },
  {
    "objectID": "hw_keys/M09-HW.html#task-4",
    "href": "hw_keys/M09-HW.html#task-4",
    "title": "Metadata",
    "section": "Task 4",
    "text": "Task 4\n(1 point)\nCreate a file outside your repo to test your package by running it.\nTo do this, import the package into your file and create a BookLover object.\nThen add a book and then print number books read.\nThen run the file.\nShow the output of running the file below, using a command like the following:\n!python ../book_lover_demo.py\nNote: You may run this from the command line and cut-and-paste a screenshot of your results here."
  },
  {
    "objectID": "hw_keys/M07-HW-KEY.html",
    "href": "hw_keys/M07-HW-KEY.html",
    "title": "Metadata",
    "section": "",
    "text": "Course:  DS 5100\nModule:  07 Python Classes\nTopic:   HW 07 Stock Class\nAuthor:  R.C. Alvarado\nDate:    7 July 2023\n\nStudent Info\n\nName:\n\nNet UD:\nURL of this file in GitHub:\n\n\n\nInstructions\nIn your private course repo on Rivanna, use this Jupyter notebook and the data file described to write code that performs the tasks below.\nSave your notebook in the M07 directory.\nRemember to add and commit these files to your repo.\nThen push your commits to your repo on GitHib.\nBe sure to fill out the Student Info block above.\nTo submit your homework, save the notebook as a PDF and upload it to GradeScope, following the instructions.\nTOTAL POINTS: 12\n\n\nOverview\nIn this assignment you will define a class and use it to perform the requested tasks.\nBefore answering the questions, read the market data from apple_data.csv into a Pandas dataframe. The file is in the HW for this module in the course repo.\n\n\nSetting Up\n\nimport pandas as pd\nimport numpy as np\n\n\n\nPrepare the Data\nRead in the dataset from the attached file apple_data.csv using pd.read_csv().\n\n# CODE HERE\n\n\ndf = pd.read_csv(\"apple_data.csv\")\n\n\ndf\n\n\n\n\n\n\n\n\n\ndate\nadj_close\n\n\n\n\n0\n2020-01-02\n298.829956\n\n\n1\n2020-01-03\n295.924713\n\n\n2\n2020-01-06\n298.282715\n\n\n3\n2020-01-07\n296.879883\n\n\n4\n2020-01-08\n301.655548\n\n\n...\n...\n...\n\n\n130\n2020-07-09\n383.010010\n\n\n131\n2020-07-10\n383.679993\n\n\n132\n2020-07-13\n381.910004\n\n\n133\n2020-07-14\n388.230011\n\n\n134\n2020-07-15\n390.899994\n\n\n\n\n135 rows × 2 columns\n\n\n\n\n\n\nTask 1\n(5 PTS)\nDefine a class with these features:\nClass Name: Stock\nAttributes: - ticker: a string to hold the stock symbol - sector: a string to hold the sector name - prices: a dataframe to hold the prices for the stock\nMethods: - print_sector to just print out the sector string. - get_row_count to count the number of rows in the price dataframe. Set an attribute “price_records” equal to this count. - __init__ to build objects. Initialize with the three attribute values passed to the constructor.\n\n# CODE HERE\n\n\nclass Stock():\n        \n    def __init__(self, ticker, sector, prices):\n        self.ticker = ticker\n        self.sector = sector\n        self.prices = prices\n    \n    def print_sector(self):\n        print(self.sector)\n    \n    def get_row_count(self):\n        self.price_records = len(self.prices)  \n\n\n\nTask 2\n(1 PT)\nCreate an instance of your class with the these initial values: - ticker: ‘AAPL’ - sector: ‘technology’ - prices: the imported price dataframe\nThen Use the dot operator to print the stock’s ticker.\n\n# CODE HERE\n\n\nmy_stock = Stock('AAPL', 'technology', df)\n\n\nmy_stock.ticker\n\n'AAPL'\n\n\n\n\nTask 3\n(1 PT)\nUse the print_sector() method to print the sector.\n\n# CODE HERE\n\n\nmy_stock.print_sector()\n\ntechnology\n\n\n\n\nTask 4\n(2 PTS)\nUse the get_row_count() method to compute the number of price records and set price_records.\nUse the dot operator to access the stock’s price_records, printing the result.\n\n# CODE HERE\n\n\nmy_stock.get_row_count()\n\n\nmy_stock.price_records\n\n135\n\n\n\n\nTask 5\n(1 PT)\nAdd a new column called 'month' to the prices attribute and put the month number there.\nHint: You can use .apply() with a lambda function to split the month string and keep the second element.\n\n# CODE HERE\n\n\nmy_stock.prices['month'] = my_stock.prices['date'].apply(lambda x: x.split('-')[1])\n\n\n# Another method\n\n\n# my_stock.prices['month'] = my_stock.prices['date'].str.split('-').str[1]\n\n\n\nTask 6\n(1 PT)\nUse .groupby() to compute the mean adj_close by month. Save your result is a dataframe, not a series.\n\n# CODE HERE\n\n\nacm_month = my_stock.prices.groupby('month').adj_close.mean().to_frame()\n\n\nacm_month\n\n\n\n\n\n\n\n\n\nadj_close\n\n\nmonth\n\n\n\n\n\n01\n310.337596\n\n\n02\n310.271843\n\n\n03\n261.735581\n\n\n04\n271.650839\n\n\n05\n309.785164\n\n\n06\n345.806360\n\n\n07\n378.385999\n\n\n\n\n\n\n\n\n\n# Another method\n# my_stock.prices.groupby('month').agg({'adj_close':'mean'})\n\n\n\nTask 7\n(1 PT)\nPlot the mean adj_close by month using a simple line plot.\n\n# CODE HERE\n\n\nacm_month.plot();"
  }
]